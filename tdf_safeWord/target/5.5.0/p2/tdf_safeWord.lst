
/Users/viditb/TDF_Project2_Final/tdf_safeWord/target/5.5.0/p2/tdf_safeWord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fd000  085fd000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fd018  085fd018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fde70  085fd0a8  0000de70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00002178  023fde78  085fd0b0  0000de78  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007ad98  085ff228  0001ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e0  1007ae08  1007ae08  0002ae08  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff298  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000d1c  085ff29c  085ff29c  0001f29c  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f29c  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0013c9a5  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000141a1  00000000  00000000  0015c9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000400ff  00000000  00000000  00170b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ee0  00000000  00000000  001b0c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000c120  00000000  00000000  001b3b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002485f  00000000  00000000  001bfc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000407ea  00000000  00000000  001e44a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d401e  00000000  00000000  00224c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000083f4  00000000  00000000  002f8cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fd018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd018:	4813      	ldr	r0, [pc, #76]	; (85fd068 <module_user_pre_init+0x50>)
 85fd01a:	4914      	ldr	r1, [pc, #80]	; (85fd06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fd01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd01e:	4288      	cmp	r0, r1
 85fd020:	d005      	beq.n	85fd02e <module_user_pre_init+0x16>
 85fd022:	4a13      	ldr	r2, [pc, #76]	; (85fd070 <module_user_pre_init+0x58>)
 85fd024:	4282      	cmp	r2, r0
 85fd026:	d002      	beq.n	85fd02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fd028:	4b12      	ldr	r3, [pc, #72]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd02a:	1a12      	subs	r2, r2, r0
 85fd02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fd02e:	4812      	ldr	r0, [pc, #72]	; (85fd078 <module_user_pre_init+0x60>)
 85fd030:	4a12      	ldr	r2, [pc, #72]	; (85fd07c <module_user_pre_init+0x64>)
 85fd032:	2100      	movs	r1, #0
 85fd034:	4b12      	ldr	r3, [pc, #72]	; (85fd080 <module_user_pre_init+0x68>)
 85fd036:	1a12      	subs	r2, r2, r0
 85fd038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fd03a:	4812      	ldr	r0, [pc, #72]	; (85fd084 <module_user_pre_init+0x6c>)
 85fd03c:	4912      	ldr	r1, [pc, #72]	; (85fd088 <module_user_pre_init+0x70>)
 85fd03e:	4288      	cmp	r0, r1
 85fd040:	d005      	beq.n	85fd04e <module_user_pre_init+0x36>
 85fd042:	4a12      	ldr	r2, [pc, #72]	; (85fd08c <module_user_pre_init+0x74>)
 85fd044:	4282      	cmp	r2, r0
 85fd046:	d002      	beq.n	85fd04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fd048:	4b0a      	ldr	r3, [pc, #40]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd04a:	1a12      	subs	r2, r2, r0
 85fd04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fd04e:	4810      	ldr	r0, [pc, #64]	; (85fd090 <module_user_pre_init+0x78>)
 85fd050:	4910      	ldr	r1, [pc, #64]	; (85fd094 <module_user_pre_init+0x7c>)
 85fd052:	4288      	cmp	r0, r1
 85fd054:	d005      	beq.n	85fd062 <module_user_pre_init+0x4a>
 85fd056:	4a10      	ldr	r2, [pc, #64]	; (85fd098 <module_user_pre_init+0x80>)
 85fd058:	4282      	cmp	r2, r0
 85fd05a:	d002      	beq.n	85fd062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fd05c:	4b05      	ldr	r3, [pc, #20]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd05e:	1a12      	subs	r2, r2, r0
 85fd060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fd062:	4801      	ldr	r0, [pc, #4]	; (85fd068 <module_user_pre_init+0x50>)
 85fd064:	bd08      	pop	{r3, pc}
 85fd066:	bf00      	nop
 85fd068:	1007ad98 	.word	0x1007ad98
 85fd06c:	085ff228 	.word	0x085ff228
 85fd070:	1007ae08 	.word	0x1007ae08
 85fd074:	10110d2d 	.word	0x10110d2d
 85fd078:	1007ae08 	.word	0x1007ae08
 85fd07c:	1007afe8 	.word	0x1007afe8
 85fd080:	10110ea1 	.word	0x10110ea1
 85fd084:	023fde70 	.word	0x023fde70
 85fd088:	085fd0a8 	.word	0x085fd0a8
 85fd08c:	023fde78 	.word	0x023fde78
 85fd090:	023fde78 	.word	0x023fde78
 85fd094:	085fd0b0 	.word	0x085fd0b0
 85fd098:	023ffff0 	.word	0x023ffff0

085fd09c <dynalib_preinit>:
 85fd09c:	085fd019 00000000                       .._.....

Disassembly of section .psram_text:

023fde78 <strlen>:
 23fde78:	4603      	mov	r3, r0
 23fde7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fde7e:	2a00      	cmp	r2, #0
 23fde80:	d1fb      	bne.n	23fde7a <strlen+0x2>
 23fde82:	1a18      	subs	r0, r3, r0
 23fde84:	3801      	subs	r0, #1
 23fde86:	4770      	bx	lr

023fde88 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fde88:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fde8a:	f001 fccd 	bl	23ff828 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fde8e:	2500      	movs	r5, #0
 23fde90:	4e05      	ldr	r6, [pc, #20]	; (23fdea8 <module_user_init+0x20>)
 23fde92:	4c06      	ldr	r4, [pc, #24]	; (23fdeac <module_user_init+0x24>)
 23fde94:	1ba4      	subs	r4, r4, r6
 23fde96:	08a4      	lsrs	r4, r4, #2
 23fde98:	42ac      	cmp	r4, r5
 23fde9a:	d100      	bne.n	23fde9e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fde9c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fde9e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fdea2:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdea4:	3501      	adds	r5, #1
 23fdea6:	e7f7      	b.n	23fde98 <module_user_init+0x10>
 23fdea8:	023fffcc 	.word	0x023fffcc
 23fdeac:	023ffff0 	.word	0x023ffff0

023fdeb0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fdeb0:	f000 b8e0 	b.w	23fe074 <setup>

023fdeb4 <module_user_loop>:
}

void module_user_loop() {
 23fdeb4:	b508      	push	{r3, lr}
    loop();
 23fdeb6:	f000 f947 	bl	23fe148 <loop>
    _post_loop();
}
 23fdeba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fdebe:	f001 bc6b 	b.w	23ff798 <_post_loop>

023fdec2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fdec2:	f000 bcd7 	b.w	23fe874 <malloc>

023fdec6 <_Znaj>:
 23fdec6:	f000 bcd5 	b.w	23fe874 <malloc>

023fdeca <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fdeca:	f000 bce1 	b.w	23fe890 <free>

023fdece <__wrap_printf>:
// and we'll leak memory. Stub it out
int __wrap_puts(const char* s) {
    return -1;
}

int __wrap_printf(const char* fmt, ...) {
 23fdece:	b40f      	push	{r0, r1, r2, r3}
    return -1;
}
 23fded0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fded4:	b004      	add	sp, #16
 23fded6:	4770      	bx	lr

023fded8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fded8:	7800      	ldrb	r0, [r0, #0]
 23fdeda:	fab0 f080 	clz	r0, r0
 23fdede:	0940      	lsrs	r0, r0, #5
 23fdee0:	4770      	bx	lr

023fdee2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fdee2:	2301      	movs	r3, #1
 23fdee4:	7003      	strb	r3, [r0, #0]
 23fdee6:	4770      	bx	lr

023fdee8 <_ZN16Adafruit_DRV2605C1Ev>:
    @brief  Instantiates a new DRV2605 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_DRV2605::Adafruit_DRV2605() {
}
 23fdee8:	4770      	bx	lr

023fdeea <_ZN16Adafruit_DRV260513readRegister8Eh>:
  writeRegister8(DRV2605_REG_RTPIN, rtp);
}

/********************************************************************/

uint8_t Adafruit_DRV2605::readRegister8(uint8_t reg) {
 23fdeea:	b510      	push	{r4, lr}
 23fdeec:	460c      	mov	r4, r1
  uint8_t x ;
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
 23fdeee:	f001 fd39 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdef2:	215a      	movs	r1, #90	; 0x5a
 23fdef4:	f001 f8c2 	bl	23ff07c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)reg);
 23fdef8:	f001 fd34 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdefc:	6803      	ldr	r3, [r0, #0]
 23fdefe:	4621      	mov	r1, r4
 23fdf00:	689b      	ldr	r3, [r3, #8]
 23fdf02:	4798      	blx	r3
    Wire.endTransmission();
 23fdf04:	f001 fd2e 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdf08:	f001 f8bf 	bl	23ff08a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((byte)DRV2605_ADDR, (byte)1);
 23fdf0c:	f001 fd2a 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdf10:	2201      	movs	r2, #1
 23fdf12:	215a      	movs	r1, #90	; 0x5a
 23fdf14:	f001 f8ab 	bl	23ff06e <_ZN7TwoWire11requestFromEhj>
    x = Wire.read();
 23fdf18:	f001 fd24 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdf1c:	6803      	ldr	r3, [r0, #0]
 23fdf1e:	695b      	ldr	r3, [r3, #20]
 23fdf20:	4798      	blx	r3

  //  Serial.print("$"); Serial.print(reg, HEX);
  //  Serial.print(": 0x"); Serial.println(x, HEX);

  return x;
}
 23fdf22:	b2c0      	uxtb	r0, r0
 23fdf24:	bd10      	pop	{r4, pc}

023fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>:

void Adafruit_DRV2605::writeRegister8(uint8_t reg, uint8_t val) {
 23fdf26:	b538      	push	{r3, r4, r5, lr}
 23fdf28:	4614      	mov	r4, r2
 23fdf2a:	460d      	mov	r5, r1
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
 23fdf2c:	f001 fd1a 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdf30:	215a      	movs	r1, #90	; 0x5a
 23fdf32:	f001 f8a3 	bl	23ff07c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)reg);
 23fdf36:	f001 fd15 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdf3a:	6803      	ldr	r3, [r0, #0]
 23fdf3c:	4629      	mov	r1, r5
 23fdf3e:	689b      	ldr	r3, [r3, #8]
 23fdf40:	4798      	blx	r3
    Wire.write((byte)val);
 23fdf42:	f001 fd0f 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdf46:	6803      	ldr	r3, [r0, #0]
 23fdf48:	4621      	mov	r1, r4
 23fdf4a:	689b      	ldr	r3, [r3, #8]
 23fdf4c:	4798      	blx	r3
    Wire.endTransmission();
 23fdf4e:	f001 fd09 	bl	23ff964 <_Z19__fetch_global_Wirev>
}
 23fdf52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
 23fdf56:	f001 b898 	b.w	23ff08a <_ZN7TwoWire15endTransmissionEv>

023fdf5a <_ZN16Adafruit_DRV26055beginEv>:
boolean Adafruit_DRV2605::begin() {
 23fdf5a:	b510      	push	{r4, lr}
 23fdf5c:	4604      	mov	r4, r0
  Wire.begin();
 23fdf5e:	f001 fd01 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23fdf62:	f001 f855 	bl	23ff010 <_ZN7TwoWire5beginEv>
  uint8_t id = readRegister8(DRV2605_REG_STATUS);
 23fdf66:	2100      	movs	r1, #0
 23fdf68:	4620      	mov	r0, r4
 23fdf6a:	f7ff ffbe 	bl	23fdeea <_ZN16Adafruit_DRV260513readRegister8Eh>
  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
 23fdf6e:	4620      	mov	r0, r4
 23fdf70:	2200      	movs	r2, #0
 23fdf72:	2101      	movs	r1, #1
 23fdf74:	f7ff ffd7 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
 23fdf78:	4620      	mov	r0, r4
 23fdf7a:	2200      	movs	r2, #0
 23fdf7c:	2102      	movs	r1, #2
 23fdf7e:	f7ff ffd2 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
 23fdf82:	4620      	mov	r0, r4
 23fdf84:	2201      	movs	r2, #1
 23fdf86:	2104      	movs	r1, #4
 23fdf88:	f7ff ffcd 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0);
 23fdf8c:	4620      	mov	r0, r4
 23fdf8e:	2200      	movs	r2, #0
 23fdf90:	2105      	movs	r1, #5
 23fdf92:	f7ff ffc8 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
 23fdf96:	4620      	mov	r0, r4
 23fdf98:	2200      	movs	r2, #0
 23fdf9a:	210d      	movs	r1, #13
 23fdf9c:	f7ff ffc3 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
 23fdfa0:	4620      	mov	r0, r4
 23fdfa2:	2200      	movs	r2, #0
 23fdfa4:	210e      	movs	r1, #14
 23fdfa6:	f7ff ffbe 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
 23fdfaa:	4620      	mov	r0, r4
 23fdfac:	2200      	movs	r2, #0
 23fdfae:	210f      	movs	r1, #15
 23fdfb0:	f7ff ffb9 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_BREAK, 0);
 23fdfb4:	4620      	mov	r0, r4
 23fdfb6:	2200      	movs	r2, #0
 23fdfb8:	2110      	movs	r1, #16
 23fdfba:	f7ff ffb4 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
 23fdfbe:	2264      	movs	r2, #100	; 0x64
 23fdfc0:	4620      	mov	r0, r4
 23fdfc2:	2113      	movs	r1, #19
 23fdfc4:	f7ff ffaf 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
 23fdfc8:	211a      	movs	r1, #26
 23fdfca:	4620      	mov	r0, r4
 23fdfcc:	f7ff ff8d 	bl	23fdeea <_ZN16Adafruit_DRV260513readRegister8Eh>
 23fdfd0:	211a      	movs	r1, #26
 23fdfd2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 23fdfd6:	4620      	mov	r0, r4
 23fdfd8:	f7ff ffa5 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_CONTROL3, readRegister8(DRV2605_REG_CONTROL3) | 0x20);
 23fdfdc:	211d      	movs	r1, #29
 23fdfde:	4620      	mov	r0, r4
 23fdfe0:	f7ff ff83 	bl	23fdeea <_ZN16Adafruit_DRV260513readRegister8Eh>
 23fdfe4:	f040 0020 	orr.w	r0, r0, #32
 23fdfe8:	b2c2      	uxtb	r2, r0
 23fdfea:	211d      	movs	r1, #29
 23fdfec:	4620      	mov	r0, r4
 23fdfee:	f7ff ff9a 	bl	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
}
 23fdff2:	2001      	movs	r0, #1
 23fdff4:	bd10      	pop	{r4, pc}

023fdff6 <_ZN16Adafruit_DRV260511setWaveformEhh>:
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
 23fdff6:	3104      	adds	r1, #4
 23fdff8:	b2c9      	uxtb	r1, r1
 23fdffa:	f7ff bf94 	b.w	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

023fdffe <_ZN16Adafruit_DRV260513selectLibraryEh>:
void Adafruit_DRV2605::selectLibrary(uint8_t lib) {
 23fdffe:	460a      	mov	r2, r1
  writeRegister8(DRV2605_REG_LIBRARY, lib);
 23fe000:	2103      	movs	r1, #3
 23fe002:	f7ff bf90 	b.w	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

023fe006 <_ZN16Adafruit_DRV26052goEv>:
  writeRegister8(DRV2605_REG_GO, 1);
 23fe006:	2201      	movs	r2, #1
 23fe008:	210c      	movs	r1, #12
 23fe00a:	f7ff bf8c 	b.w	23fdf26 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
	...

023fe010 <_Z12handleHapticPKcS0_>:
  }

}

// Custom handler function for handling incoming messages
void handleHaptic(const char *event, const char *data) {
 23fe010:	b508      	push	{r3, lr}
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fe012:	4b0a      	ldr	r3, [pc, #40]	; (23fe03c <_Z12handleHapticPKcS0_+0x2c>)
    // Check if the message was published by this device
    if (event == deviceID) {
 23fe014:	681b      	ldr	r3, [r3, #0]
 23fe016:	4283      	cmp	r3, r0
 23fe018:	d00e      	beq.n	23fe038 <_Z12handleHapticPKcS0_+0x28>
        // Message published by this device, ignore it
        return;
    } else {
      //Play Haptic...
        drv.setWaveform(0, 15);  // Set the effect to play.
 23fe01a:	220f      	movs	r2, #15
 23fe01c:	2100      	movs	r1, #0
 23fe01e:	4808      	ldr	r0, [pc, #32]	; (23fe040 <_Z12handleHapticPKcS0_+0x30>)
 23fe020:	f7ff ffe9 	bl	23fdff6 <_ZN16Adafruit_DRV260511setWaveformEhh>
        drv.setWaveform(1, 0);       // This is to end the waveform sequence.
 23fe024:	4806      	ldr	r0, [pc, #24]	; (23fe040 <_Z12handleHapticPKcS0_+0x30>)
 23fe026:	2200      	movs	r2, #0
 23fe028:	2101      	movs	r1, #1
 23fe02a:	f7ff ffe4 	bl	23fdff6 <_ZN16Adafruit_DRV260511setWaveformEhh>
        drv.go();
    }
}
 23fe02e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        drv.go();
 23fe032:	4803      	ldr	r0, [pc, #12]	; (23fe040 <_Z12handleHapticPKcS0_+0x30>)
 23fe034:	f7ff bfe7 	b.w	23fe006 <_ZN16Adafruit_DRV26052goEv>
}
 23fe038:	bd08      	pop	{r3, pc}
 23fe03a:	bf00      	nop
 23fe03c:	1007ae2c 	.word	0x1007ae2c
 23fe040:	1007ae3c 	.word	0x1007ae3c

023fe044 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fe044:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fe046:	f04f 0c20 	mov.w	ip, #32
 23fe04a:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fe04c:	b500      	push	{lr}
 23fe04e:	b08c      	sub	sp, #48	; 0x30
 23fe050:	aa0d      	add	r2, sp, #52	; 0x34
 23fe052:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fe056:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fe05a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fe05e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fe060:	6801      	ldr	r1, [r0, #0]
 23fe062:	aa04      	add	r2, sp, #16
 23fe064:	201e      	movs	r0, #30
 23fe066:	f000 fac3 	bl	23fe5f0 <log_message_v>
}
 23fe06a:	b00c      	add	sp, #48	; 0x30
 23fe06c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fe070:	b003      	add	sp, #12
 23fe072:	4770      	bx	lr

023fe074 <setup>:
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 23fe074:	2200      	movs	r2, #0
void setup() {
 23fe076:	b513      	push	{r0, r1, r4, lr}
 23fe078:	e9cd 2200 	strd	r2, r2, [sp]
 23fe07c:	4808      	ldr	r0, [pc, #32]	; (23fe0a0 <setup+0x2c>)
  drv.begin();
 23fe07e:	4c09      	ldr	r4, [pc, #36]	; (23fe0a4 <setup+0x30>)
 23fe080:	2301      	movs	r3, #1
 23fe082:	4909      	ldr	r1, [pc, #36]	; (23fe0a8 <setup+0x34>)
 23fe084:	6800      	ldr	r0, [r0, #0]
 23fe086:	f000 fb31 	bl	23fe6ec <spark_subscribe>
 23fe08a:	4620      	mov	r0, r4
 23fe08c:	f7ff ff65 	bl	23fdf5a <_ZN16Adafruit_DRV26055beginEv>
  drv.selectLibrary(1); // Use the Library 1, which includes pre-defined haptic effects
 23fe090:	2101      	movs	r1, #1
 23fe092:	4620      	mov	r0, r4
}
 23fe094:	b002      	add	sp, #8
 23fe096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  drv.selectLibrary(1); // Use the Library 1, which includes pre-defined haptic effects
 23fe09a:	f7ff bfb0 	b.w	23fdffe <_ZN16Adafruit_DRV260513selectLibraryEh>
 23fe09e:	bf00      	nop
 23fe0a0:	1007ae18 	.word	0x1007ae18
 23fe0a4:	1007ae3c 	.word	0x1007ae3c
 23fe0a8:	023fe011 	.word	0x023fe011

023fe0ac <_Z17sendHapticRequestv>:
void sendHapticRequest() {
 23fe0ac:	b510      	push	{r4, lr}
 23fe0ae:	b08c      	sub	sp, #48	; 0x30
    String messageOut = "Trigger Safeword Haptic";
 23fe0b0:	491f      	ldr	r1, [pc, #124]	; (23fe130 <_Z17sendHapticRequestv+0x84>)
 23fe0b2:	a804      	add	r0, sp, #16
 23fe0b4:	f001 f9c3 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 23fe0b8:	491e      	ldr	r1, [pc, #120]	; (23fe134 <_Z17sendHapticRequestv+0x88>)
 23fe0ba:	a808      	add	r0, sp, #32
 23fe0bc:	f001 f9bf 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("publishMessage: "+ messageOut);
 23fe0c0:	a904      	add	r1, sp, #16
 23fe0c2:	a808      	add	r0, sp, #32
 23fe0c4:	f001 fa00 	bl	23ff4c8 <_ZplRK15StringSumHelperRK6String>
 23fe0c8:	6801      	ldr	r1, [r0, #0]
 23fe0ca:	481b      	ldr	r0, [pc, #108]	; (23fe138 <_Z17sendHapticRequestv+0x8c>)
 23fe0cc:	f7ff ffba 	bl	23fe044 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
 23fe0d0:	a808      	add	r0, sp, #32
 23fe0d2:	f001 f969 	bl	23ff3a8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 23fe0d6:	4919      	ldr	r1, [pc, #100]	; (23fe13c <_Z17sendHapticRequestv+0x90>)
 23fe0d8:	a808      	add	r0, sp, #32
 23fe0da:	f001 f9d3 	bl	23ff484 <_ZN6StringC1ERKS_>
    Particle.publish(hapticSend + sara_deviceID, messageOut);
 23fe0de:	4918      	ldr	r1, [pc, #96]	; (23fe140 <_Z17sendHapticRequestv+0x94>)
 23fe0e0:	a808      	add	r0, sp, #32
 23fe0e2:	f001 f9f1 	bl	23ff4c8 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 23fe0e6:	4b17      	ldr	r3, [pc, #92]	; (23fe144 <_Z17sendHapticRequestv+0x98>)
 23fe0e8:	6801      	ldr	r1, [r0, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fe0ea:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fe0ec:	9a04      	ldr	r2, [sp, #16]
 23fe0ee:	f88d 3000 	strb.w	r3, [sp]
 23fe0f2:	a802      	add	r0, sp, #8
 23fe0f4:	233c      	movs	r3, #60	; 0x3c
 23fe0f6:	f000 fd99 	bl	23fec2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23fe0fa:	9c03      	ldr	r4, [sp, #12]
 23fe0fc:	b17c      	cbz	r4, 23fe11e <_Z17sendHapticRequestv+0x72>
      if (--_M_use_count == 0)
 23fe0fe:	6863      	ldr	r3, [r4, #4]
 23fe100:	3b01      	subs	r3, #1
 23fe102:	6063      	str	r3, [r4, #4]
 23fe104:	b95b      	cbnz	r3, 23fe11e <_Z17sendHapticRequestv+0x72>
          _M_dispose();
 23fe106:	6823      	ldr	r3, [r4, #0]
 23fe108:	4620      	mov	r0, r4
 23fe10a:	689b      	ldr	r3, [r3, #8]
 23fe10c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fe10e:	68a3      	ldr	r3, [r4, #8]
 23fe110:	3b01      	subs	r3, #1
 23fe112:	60a3      	str	r3, [r4, #8]
 23fe114:	b91b      	cbnz	r3, 23fe11e <_Z17sendHapticRequestv+0x72>
            _M_destroy();
 23fe116:	6823      	ldr	r3, [r4, #0]
 23fe118:	4620      	mov	r0, r4
 23fe11a:	68db      	ldr	r3, [r3, #12]
 23fe11c:	4798      	blx	r3
class StringSumHelper : public String
 23fe11e:	a808      	add	r0, sp, #32
 23fe120:	f001 f942 	bl	23ff3a8 <_ZN6StringD1Ev>
    String messageOut = "Trigger Safeword Haptic";
 23fe124:	a804      	add	r0, sp, #16
 23fe126:	f001 f93f 	bl	23ff3a8 <_ZN6StringD1Ev>
}
 23fe12a:	b00c      	add	sp, #48	; 0x30
 23fe12c:	bd10      	pop	{r4, pc}
 23fe12e:	bf00      	nop
 23fe130:	023ffcf4 	.word	0x023ffcf4
 23fe134:	023ffd0c 	.word	0x023ffd0c
 23fe138:	1007ae8c 	.word	0x1007ae8c
 23fe13c:	1007ae08 	.word	0x1007ae08
 23fe140:	1007ae60 	.word	0x1007ae60
 23fe144:	1007ae28 	.word	0x1007ae28

023fe148 <loop>:
void loop() {
 23fe148:	b510      	push	{r4, lr}
  const int sensorValue = analogRead(analogInPin);
 23fe14a:	200b      	movs	r0, #11
 23fe14c:	f001 fbdc 	bl	23ff908 <analogRead>
 23fe150:	4604      	mov	r4, r0
  printf("Sensor Value: %d", sensorValue);
 23fe152:	4601      	mov	r1, r0
 23fe154:	480b      	ldr	r0, [pc, #44]	; (23fe184 <loop+0x3c>)
 23fe156:	f7ff feba 	bl	23fdece <__wrap_printf>
  if (sensorValue > 500) {
 23fe15a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 23fe15e:	dd10      	ble.n	23fe182 <loop+0x3a>
    sendHapticRequest();
 23fe160:	f7ff ffa4 	bl	23fe0ac <_Z17sendHapticRequestv>
        drv.setWaveform(0, 8);  // Set the effect to play.
 23fe164:	2208      	movs	r2, #8
 23fe166:	2100      	movs	r1, #0
 23fe168:	4807      	ldr	r0, [pc, #28]	; (23fe188 <loop+0x40>)
 23fe16a:	f7ff ff44 	bl	23fdff6 <_ZN16Adafruit_DRV260511setWaveformEhh>
        drv.setWaveform(1, 0);       // This is to end the waveform sequence.
 23fe16e:	4806      	ldr	r0, [pc, #24]	; (23fe188 <loop+0x40>)
 23fe170:	2200      	movs	r2, #0
 23fe172:	2101      	movs	r1, #1
 23fe174:	f7ff ff3f 	bl	23fdff6 <_ZN16Adafruit_DRV260511setWaveformEhh>
}
 23fe178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        drv.go();
 23fe17c:	4802      	ldr	r0, [pc, #8]	; (23fe188 <loop+0x40>)
 23fe17e:	f7ff bf42 	b.w	23fe006 <_ZN16Adafruit_DRV26052goEv>
}
 23fe182:	bd10      	pop	{r4, pc}
 23fe184:	023ffd1d 	.word	0x023ffd1d
 23fe188:	1007ae3c 	.word	0x1007ae3c

023fe18c <_GLOBAL__sub_I_deviceID>:
}
 23fe18c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
 23fe18e:	2400      	movs	r4, #0
 23fe190:	4b13      	ldr	r3, [pc, #76]	; (23fe1e0 <_GLOBAL__sub_I_deviceID+0x54>)
String deviceID = "0a10aced202194944a043b2c";
 23fe192:	4d14      	ldr	r5, [pc, #80]	; (23fe1e4 <_GLOBAL__sub_I_deviceID+0x58>)
 23fe194:	701c      	strb	r4, [r3, #0]
const String hapticReceive = "com.desInv202.project2.safeWord.0a10aced202194944a043b2c";
 23fe196:	4914      	ldr	r1, [pc, #80]	; (23fe1e8 <_GLOBAL__sub_I_deviceID+0x5c>)
 23fe198:	4814      	ldr	r0, [pc, #80]	; (23fe1ec <_GLOBAL__sub_I_deviceID+0x60>)
 23fe19a:	f001 f950 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
const String hapticSend= "com.desInv202.project2.safeWord.";
 23fe19e:	4914      	ldr	r1, [pc, #80]	; (23fe1f0 <_GLOBAL__sub_I_deviceID+0x64>)
 23fe1a0:	4814      	ldr	r0, [pc, #80]	; (23fe1f4 <_GLOBAL__sub_I_deviceID+0x68>)
 23fe1a2:	f001 f94c 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
String deviceID = "0a10aced202194944a043b2c";
 23fe1a6:	4629      	mov	r1, r5
 23fe1a8:	4813      	ldr	r0, [pc, #76]	; (23fe1f8 <_GLOBAL__sub_I_deviceID+0x6c>)
 23fe1aa:	f001 f948 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
String sara_deviceID = "0a10aced202194944a043d48";
 23fe1ae:	4913      	ldr	r1, [pc, #76]	; (23fe1fc <_GLOBAL__sub_I_deviceID+0x70>)
 23fe1b0:	4813      	ldr	r0, [pc, #76]	; (23fe200 <_GLOBAL__sub_I_deviceID+0x74>)
 23fe1b2:	f001 f944 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
String liam_deviceID = "0a10aced202194944a044ad0";
 23fe1b6:	4913      	ldr	r1, [pc, #76]	; (23fe204 <_GLOBAL__sub_I_deviceID+0x78>)
 23fe1b8:	4813      	ldr	r0, [pc, #76]	; (23fe208 <_GLOBAL__sub_I_deviceID+0x7c>)
 23fe1ba:	f001 f940 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
String eliza_deviceID = "com.eliza.photon2";
 23fe1be:	4913      	ldr	r1, [pc, #76]	; (23fe20c <_GLOBAL__sub_I_deviceID+0x80>)
 23fe1c0:	4813      	ldr	r0, [pc, #76]	; (23fe210 <_GLOBAL__sub_I_deviceID+0x84>)
 23fe1c2:	f001 f93c 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
String vidit_deviceID = "0a10aced202194944a043b2c";
 23fe1c6:	4629      	mov	r1, r5
 23fe1c8:	4812      	ldr	r0, [pc, #72]	; (23fe214 <_GLOBAL__sub_I_deviceID+0x88>)
 23fe1ca:	f001 f938 	bl	23ff43e <_ZN6StringC1EPK19__FlashStringHelper>
Adafruit_DRV2605 drv;
 23fe1ce:	4812      	ldr	r0, [pc, #72]	; (23fe218 <_GLOBAL__sub_I_deviceID+0x8c>)
 23fe1d0:	f7ff fe8a 	bl	23fdee8 <_ZN16Adafruit_DRV2605C1Ev>
SYSTEM_THREAD(ENABLED);
 23fe1d4:	4621      	mov	r1, r4
}
 23fe1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_THREAD(ENABLED);
 23fe1da:	2001      	movs	r0, #1
 23fe1dc:	f000 ba24 	b.w	23fe628 <system_thread_set_state>
 23fe1e0:	1007ae28 	.word	0x1007ae28
 23fe1e4:	023ffd4e 	.word	0x023ffd4e
 23fe1e8:	023ffd2e 	.word	0x023ffd2e
 23fe1ec:	1007ae18 	.word	0x1007ae18
 23fe1f0:	023ffd67 	.word	0x023ffd67
 23fe1f4:	1007ae08 	.word	0x1007ae08
 23fe1f8:	1007ae2c 	.word	0x1007ae2c
 23fe1fc:	023ffd88 	.word	0x023ffd88
 23fe200:	1007ae60 	.word	0x1007ae60
 23fe204:	023ffda1 	.word	0x023ffda1
 23fe208:	1007ae50 	.word	0x1007ae50
 23fe20c:	023ffdba 	.word	0x023ffdba
 23fe210:	1007ae40 	.word	0x1007ae40
 23fe214:	1007ae70 	.word	0x1007ae70
 23fe218:	1007ae3c 	.word	0x1007ae3c

023fe21c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe21c:	b509      	push	{r0, r3, lr}
 23fe21e:	4804      	ldr	r0, [pc, #16]	; (23fe230 <os_mutex_recursive_create+0x14>)
 23fe220:	6800      	ldr	r0, [r0, #0]
 23fe222:	4b04      	ldr	r3, [pc, #16]	; (23fe234 <os_mutex_recursive_create+0x18>)
 23fe224:	4403      	add	r3, r0
 23fe226:	681b      	ldr	r3, [r3, #0]
 23fe228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe22a:	9302      	str	r3, [sp, #8]
 23fe22c:	bd09      	pop	{r0, r3, pc}
 23fe22e:	0000      	.short	0x0000
 23fe230:	1007ad98 	.word	0x1007ad98
 23fe234:	00000030 	.word	0x00000030

023fe238 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe238:	b509      	push	{r0, r3, lr}
 23fe23a:	4804      	ldr	r0, [pc, #16]	; (23fe24c <HAL_RNG_GetRandomNumber+0x14>)
 23fe23c:	6800      	ldr	r0, [r0, #0]
 23fe23e:	4b04      	ldr	r3, [pc, #16]	; (23fe250 <HAL_RNG_GetRandomNumber+0x18>)
 23fe240:	4403      	add	r3, r0
 23fe242:	681b      	ldr	r3, [r3, #0]
 23fe244:	685b      	ldr	r3, [r3, #4]
 23fe246:	9302      	str	r3, [sp, #8]
 23fe248:	bd09      	pop	{r0, r3, pc}
 23fe24a:	0000      	.short	0x0000
 23fe24c:	1007ad98 	.word	0x1007ad98
 23fe250:	00000000 	.word	0x00000000

023fe254 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe254:	b509      	push	{r0, r3, lr}
 23fe256:	4804      	ldr	r0, [pc, #16]	; (23fe268 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe258:	6800      	ldr	r0, [r0, #0]
 23fe25a:	4b04      	ldr	r3, [pc, #16]	; (23fe26c <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe25c:	4403      	add	r3, r0
 23fe25e:	681b      	ldr	r3, [r3, #0]
 23fe260:	695b      	ldr	r3, [r3, #20]
 23fe262:	9302      	str	r3, [sp, #8]
 23fe264:	bd09      	pop	{r0, r3, pc}
 23fe266:	0000      	.short	0x0000
 23fe268:	1007ad98 	.word	0x1007ad98
 23fe26c:	00000000 	.word	0x00000000

023fe270 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fe270:	b509      	push	{r0, r3, lr}
 23fe272:	4804      	ldr	r0, [pc, #16]	; (23fe284 <hal_pin_validate_function+0x14>)
 23fe274:	6800      	ldr	r0, [r0, #0]
 23fe276:	4b04      	ldr	r3, [pc, #16]	; (23fe288 <hal_pin_validate_function+0x18>)
 23fe278:	4403      	add	r3, r0
 23fe27a:	681b      	ldr	r3, [r3, #0]
 23fe27c:	685b      	ldr	r3, [r3, #4]
 23fe27e:	9302      	str	r3, [sp, #8]
 23fe280:	bd09      	pop	{r0, r3, pc}
 23fe282:	0000      	.short	0x0000
 23fe284:	1007ad98 	.word	0x1007ad98
 23fe288:	00000014 	.word	0x00000014

023fe28c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fe28c:	b509      	push	{r0, r3, lr}
 23fe28e:	4804      	ldr	r0, [pc, #16]	; (23fe2a0 <hal_adc_read+0x14>)
 23fe290:	6800      	ldr	r0, [r0, #0]
 23fe292:	4b04      	ldr	r3, [pc, #16]	; (23fe2a4 <hal_adc_read+0x18>)
 23fe294:	4403      	add	r3, r0
 23fe296:	681b      	ldr	r3, [r3, #0]
 23fe298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe29a:	9302      	str	r3, [sp, #8]
 23fe29c:	bd09      	pop	{r0, r3, pc}
 23fe29e:	0000      	.short	0x0000
 23fe2a0:	1007ad98 	.word	0x1007ad98
 23fe2a4:	00000014 	.word	0x00000014

023fe2a8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fe2a8:	b509      	push	{r0, r3, lr}
 23fe2aa:	4804      	ldr	r0, [pc, #16]	; (23fe2bc <hal_i2c_begin+0x14>)
 23fe2ac:	6800      	ldr	r0, [r0, #0]
 23fe2ae:	4b04      	ldr	r3, [pc, #16]	; (23fe2c0 <hal_i2c_begin+0x18>)
 23fe2b0:	4403      	add	r3, r0
 23fe2b2:	681b      	ldr	r3, [r3, #0]
 23fe2b4:	68db      	ldr	r3, [r3, #12]
 23fe2b6:	9302      	str	r3, [sp, #8]
 23fe2b8:	bd09      	pop	{r0, r3, pc}
 23fe2ba:	0000      	.short	0x0000
 23fe2bc:	1007ad98 	.word	0x1007ad98
 23fe2c0:	00000010 	.word	0x00000010

023fe2c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fe2c4:	b509      	push	{r0, r3, lr}
 23fe2c6:	4804      	ldr	r0, [pc, #16]	; (23fe2d8 <hal_i2c_begin_transmission+0x14>)
 23fe2c8:	6800      	ldr	r0, [r0, #0]
 23fe2ca:	4b04      	ldr	r3, [pc, #16]	; (23fe2dc <hal_i2c_begin_transmission+0x18>)
 23fe2cc:	4403      	add	r3, r0
 23fe2ce:	681b      	ldr	r3, [r3, #0]
 23fe2d0:	699b      	ldr	r3, [r3, #24]
 23fe2d2:	9302      	str	r3, [sp, #8]
 23fe2d4:	bd09      	pop	{r0, r3, pc}
 23fe2d6:	0000      	.short	0x0000
 23fe2d8:	1007ad98 	.word	0x1007ad98
 23fe2dc:	00000010 	.word	0x00000010

023fe2e0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fe2e0:	b509      	push	{r0, r3, lr}
 23fe2e2:	4804      	ldr	r0, [pc, #16]	; (23fe2f4 <hal_i2c_end_transmission+0x14>)
 23fe2e4:	6800      	ldr	r0, [r0, #0]
 23fe2e6:	4b04      	ldr	r3, [pc, #16]	; (23fe2f8 <hal_i2c_end_transmission+0x18>)
 23fe2e8:	4403      	add	r3, r0
 23fe2ea:	681b      	ldr	r3, [r3, #0]
 23fe2ec:	69db      	ldr	r3, [r3, #28]
 23fe2ee:	9302      	str	r3, [sp, #8]
 23fe2f0:	bd09      	pop	{r0, r3, pc}
 23fe2f2:	0000      	.short	0x0000
 23fe2f4:	1007ad98 	.word	0x1007ad98
 23fe2f8:	00000010 	.word	0x00000010

023fe2fc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fe2fc:	b509      	push	{r0, r3, lr}
 23fe2fe:	4804      	ldr	r0, [pc, #16]	; (23fe310 <hal_i2c_write+0x14>)
 23fe300:	6800      	ldr	r0, [r0, #0]
 23fe302:	4b04      	ldr	r3, [pc, #16]	; (23fe314 <hal_i2c_write+0x18>)
 23fe304:	4403      	add	r3, r0
 23fe306:	681b      	ldr	r3, [r3, #0]
 23fe308:	6a1b      	ldr	r3, [r3, #32]
 23fe30a:	9302      	str	r3, [sp, #8]
 23fe30c:	bd09      	pop	{r0, r3, pc}
 23fe30e:	0000      	.short	0x0000
 23fe310:	1007ad98 	.word	0x1007ad98
 23fe314:	00000010 	.word	0x00000010

023fe318 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fe318:	b509      	push	{r0, r3, lr}
 23fe31a:	4804      	ldr	r0, [pc, #16]	; (23fe32c <hal_i2c_available+0x14>)
 23fe31c:	6800      	ldr	r0, [r0, #0]
 23fe31e:	4b04      	ldr	r3, [pc, #16]	; (23fe330 <hal_i2c_available+0x18>)
 23fe320:	4403      	add	r3, r0
 23fe322:	681b      	ldr	r3, [r3, #0]
 23fe324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe326:	9302      	str	r3, [sp, #8]
 23fe328:	bd09      	pop	{r0, r3, pc}
 23fe32a:	0000      	.short	0x0000
 23fe32c:	1007ad98 	.word	0x1007ad98
 23fe330:	00000010 	.word	0x00000010

023fe334 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fe334:	b509      	push	{r0, r3, lr}
 23fe336:	4804      	ldr	r0, [pc, #16]	; (23fe348 <hal_i2c_read+0x14>)
 23fe338:	6800      	ldr	r0, [r0, #0]
 23fe33a:	4b04      	ldr	r3, [pc, #16]	; (23fe34c <hal_i2c_read+0x18>)
 23fe33c:	4403      	add	r3, r0
 23fe33e:	681b      	ldr	r3, [r3, #0]
 23fe340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe342:	9302      	str	r3, [sp, #8]
 23fe344:	bd09      	pop	{r0, r3, pc}
 23fe346:	0000      	.short	0x0000
 23fe348:	1007ad98 	.word	0x1007ad98
 23fe34c:	00000010 	.word	0x00000010

023fe350 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fe350:	b509      	push	{r0, r3, lr}
 23fe352:	4804      	ldr	r0, [pc, #16]	; (23fe364 <hal_i2c_peek+0x14>)
 23fe354:	6800      	ldr	r0, [r0, #0]
 23fe356:	4b04      	ldr	r3, [pc, #16]	; (23fe368 <hal_i2c_peek+0x18>)
 23fe358:	4403      	add	r3, r0
 23fe35a:	681b      	ldr	r3, [r3, #0]
 23fe35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe35e:	9302      	str	r3, [sp, #8]
 23fe360:	bd09      	pop	{r0, r3, pc}
 23fe362:	0000      	.short	0x0000
 23fe364:	1007ad98 	.word	0x1007ad98
 23fe368:	00000010 	.word	0x00000010

023fe36c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe36c:	b509      	push	{r0, r3, lr}
 23fe36e:	4804      	ldr	r0, [pc, #16]	; (23fe380 <hal_i2c_flush+0x14>)
 23fe370:	6800      	ldr	r0, [r0, #0]
 23fe372:	4b04      	ldr	r3, [pc, #16]	; (23fe384 <hal_i2c_flush+0x18>)
 23fe374:	4403      	add	r3, r0
 23fe376:	681b      	ldr	r3, [r3, #0]
 23fe378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe37a:	9302      	str	r3, [sp, #8]
 23fe37c:	bd09      	pop	{r0, r3, pc}
 23fe37e:	0000      	.short	0x0000
 23fe380:	1007ad98 	.word	0x1007ad98
 23fe384:	00000010 	.word	0x00000010

023fe388 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe388:	b509      	push	{r0, r3, lr}
 23fe38a:	4804      	ldr	r0, [pc, #16]	; (23fe39c <hal_i2c_is_enabled+0x14>)
 23fe38c:	6800      	ldr	r0, [r0, #0]
 23fe38e:	4b04      	ldr	r3, [pc, #16]	; (23fe3a0 <hal_i2c_is_enabled+0x18>)
 23fe390:	4403      	add	r3, r0
 23fe392:	681b      	ldr	r3, [r3, #0]
 23fe394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe396:	9302      	str	r3, [sp, #8]
 23fe398:	bd09      	pop	{r0, r3, pc}
 23fe39a:	0000      	.short	0x0000
 23fe39c:	1007ad98 	.word	0x1007ad98
 23fe3a0:	00000010 	.word	0x00000010

023fe3a4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe3a4:	b509      	push	{r0, r3, lr}
 23fe3a6:	4804      	ldr	r0, [pc, #16]	; (23fe3b8 <hal_i2c_init+0x14>)
 23fe3a8:	6800      	ldr	r0, [r0, #0]
 23fe3aa:	4b04      	ldr	r3, [pc, #16]	; (23fe3bc <hal_i2c_init+0x18>)
 23fe3ac:	4403      	add	r3, r0
 23fe3ae:	681b      	ldr	r3, [r3, #0]
 23fe3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe3b2:	9302      	str	r3, [sp, #8]
 23fe3b4:	bd09      	pop	{r0, r3, pc}
 23fe3b6:	0000      	.short	0x0000
 23fe3b8:	1007ad98 	.word	0x1007ad98
 23fe3bc:	00000010 	.word	0x00000010

023fe3c0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fe3c0:	b509      	push	{r0, r3, lr}
 23fe3c2:	4804      	ldr	r0, [pc, #16]	; (23fe3d4 <hal_i2c_request_ex+0x14>)
 23fe3c4:	6800      	ldr	r0, [r0, #0]
 23fe3c6:	4b04      	ldr	r3, [pc, #16]	; (23fe3d8 <hal_i2c_request_ex+0x18>)
 23fe3c8:	4403      	add	r3, r0
 23fe3ca:	681b      	ldr	r3, [r3, #0]
 23fe3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fe3ce:	9302      	str	r3, [sp, #8]
 23fe3d0:	bd09      	pop	{r0, r3, pc}
 23fe3d2:	0000      	.short	0x0000
 23fe3d4:	1007ad98 	.word	0x1007ad98
 23fe3d8:	00000010 	.word	0x00000010

023fe3dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe3dc:	b509      	push	{r0, r3, lr}
 23fe3de:	4804      	ldr	r0, [pc, #16]	; (23fe3f0 <inet_inet_ntop+0x14>)
 23fe3e0:	6800      	ldr	r0, [r0, #0]
 23fe3e2:	4b04      	ldr	r3, [pc, #16]	; (23fe3f4 <inet_inet_ntop+0x18>)
 23fe3e4:	4403      	add	r3, r0
 23fe3e6:	681b      	ldr	r3, [r3, #0]
 23fe3e8:	695b      	ldr	r3, [r3, #20]
 23fe3ea:	9302      	str	r3, [sp, #8]
 23fe3ec:	bd09      	pop	{r0, r3, pc}
 23fe3ee:	0000      	.short	0x0000
 23fe3f0:	1007ad98 	.word	0x1007ad98
 23fe3f4:	0000004c 	.word	0x0000004c

023fe3f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe3f8:	b509      	push	{r0, r3, lr}
 23fe3fa:	4804      	ldr	r0, [pc, #16]	; (23fe40c <netdb_freeaddrinfo+0x14>)
 23fe3fc:	6800      	ldr	r0, [r0, #0]
 23fe3fe:	4b04      	ldr	r3, [pc, #16]	; (23fe410 <netdb_freeaddrinfo+0x18>)
 23fe400:	4403      	add	r3, r0
 23fe402:	681b      	ldr	r3, [r3, #0]
 23fe404:	689b      	ldr	r3, [r3, #8]
 23fe406:	9302      	str	r3, [sp, #8]
 23fe408:	bd09      	pop	{r0, r3, pc}
 23fe40a:	0000      	.short	0x0000
 23fe40c:	1007ad98 	.word	0x1007ad98
 23fe410:	00000050 	.word	0x00000050

023fe414 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe414:	b509      	push	{r0, r3, lr}
 23fe416:	4804      	ldr	r0, [pc, #16]	; (23fe428 <netdb_getaddrinfo+0x14>)
 23fe418:	6800      	ldr	r0, [r0, #0]
 23fe41a:	4b04      	ldr	r3, [pc, #16]	; (23fe42c <netdb_getaddrinfo+0x18>)
 23fe41c:	4403      	add	r3, r0
 23fe41e:	681b      	ldr	r3, [r3, #0]
 23fe420:	68db      	ldr	r3, [r3, #12]
 23fe422:	9302      	str	r3, [sp, #8]
 23fe424:	bd09      	pop	{r0, r3, pc}
 23fe426:	0000      	.short	0x0000
 23fe428:	1007ad98 	.word	0x1007ad98
 23fe42c:	00000050 	.word	0x00000050

023fe430 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe430:	b509      	push	{r0, r3, lr}
 23fe432:	4804      	ldr	r0, [pc, #16]	; (23fe444 <hal_spi_init+0x14>)
 23fe434:	6800      	ldr	r0, [r0, #0]
 23fe436:	4b04      	ldr	r3, [pc, #16]	; (23fe448 <hal_spi_init+0x18>)
 23fe438:	4403      	add	r3, r0
 23fe43a:	681b      	ldr	r3, [r3, #0]
 23fe43c:	69db      	ldr	r3, [r3, #28]
 23fe43e:	9302      	str	r3, [sp, #8]
 23fe440:	bd09      	pop	{r0, r3, pc}
 23fe442:	0000      	.short	0x0000
 23fe444:	1007ad98 	.word	0x1007ad98
 23fe448:	00000018 	.word	0x00000018

023fe44c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe44c:	b509      	push	{r0, r3, lr}
 23fe44e:	4804      	ldr	r0, [pc, #16]	; (23fe460 <hal_spi_is_enabled+0x14>)
 23fe450:	6800      	ldr	r0, [r0, #0]
 23fe452:	4b04      	ldr	r3, [pc, #16]	; (23fe464 <hal_spi_is_enabled+0x18>)
 23fe454:	4403      	add	r3, r0
 23fe456:	681b      	ldr	r3, [r3, #0]
 23fe458:	6a1b      	ldr	r3, [r3, #32]
 23fe45a:	9302      	str	r3, [sp, #8]
 23fe45c:	bd09      	pop	{r0, r3, pc}
 23fe45e:	0000      	.short	0x0000
 23fe460:	1007ad98 	.word	0x1007ad98
 23fe464:	00000018 	.word	0x00000018

023fe468 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fe468:	b509      	push	{r0, r3, lr}
 23fe46a:	4804      	ldr	r0, [pc, #16]	; (23fe47c <hal_usart_write+0x14>)
 23fe46c:	6800      	ldr	r0, [r0, #0]
 23fe46e:	4b04      	ldr	r3, [pc, #16]	; (23fe480 <hal_usart_write+0x18>)
 23fe470:	4403      	add	r3, r0
 23fe472:	681b      	ldr	r3, [r3, #0]
 23fe474:	68db      	ldr	r3, [r3, #12]
 23fe476:	9302      	str	r3, [sp, #8]
 23fe478:	bd09      	pop	{r0, r3, pc}
 23fe47a:	0000      	.short	0x0000
 23fe47c:	1007ad98 	.word	0x1007ad98
 23fe480:	00000024 	.word	0x00000024

023fe484 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fe484:	b509      	push	{r0, r3, lr}
 23fe486:	4804      	ldr	r0, [pc, #16]	; (23fe498 <hal_usart_available+0x14>)
 23fe488:	6800      	ldr	r0, [r0, #0]
 23fe48a:	4b04      	ldr	r3, [pc, #16]	; (23fe49c <hal_usart_available+0x18>)
 23fe48c:	4403      	add	r3, r0
 23fe48e:	681b      	ldr	r3, [r3, #0]
 23fe490:	691b      	ldr	r3, [r3, #16]
 23fe492:	9302      	str	r3, [sp, #8]
 23fe494:	bd09      	pop	{r0, r3, pc}
 23fe496:	0000      	.short	0x0000
 23fe498:	1007ad98 	.word	0x1007ad98
 23fe49c:	00000024 	.word	0x00000024

023fe4a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fe4a0:	b509      	push	{r0, r3, lr}
 23fe4a2:	4804      	ldr	r0, [pc, #16]	; (23fe4b4 <hal_usart_read+0x14>)
 23fe4a4:	6800      	ldr	r0, [r0, #0]
 23fe4a6:	4b04      	ldr	r3, [pc, #16]	; (23fe4b8 <hal_usart_read+0x18>)
 23fe4a8:	4403      	add	r3, r0
 23fe4aa:	681b      	ldr	r3, [r3, #0]
 23fe4ac:	695b      	ldr	r3, [r3, #20]
 23fe4ae:	9302      	str	r3, [sp, #8]
 23fe4b0:	bd09      	pop	{r0, r3, pc}
 23fe4b2:	0000      	.short	0x0000
 23fe4b4:	1007ad98 	.word	0x1007ad98
 23fe4b8:	00000024 	.word	0x00000024

023fe4bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fe4bc:	b509      	push	{r0, r3, lr}
 23fe4be:	4804      	ldr	r0, [pc, #16]	; (23fe4d0 <hal_usart_peek+0x14>)
 23fe4c0:	6800      	ldr	r0, [r0, #0]
 23fe4c2:	4b04      	ldr	r3, [pc, #16]	; (23fe4d4 <hal_usart_peek+0x18>)
 23fe4c4:	4403      	add	r3, r0
 23fe4c6:	681b      	ldr	r3, [r3, #0]
 23fe4c8:	699b      	ldr	r3, [r3, #24]
 23fe4ca:	9302      	str	r3, [sp, #8]
 23fe4cc:	bd09      	pop	{r0, r3, pc}
 23fe4ce:	0000      	.short	0x0000
 23fe4d0:	1007ad98 	.word	0x1007ad98
 23fe4d4:	00000024 	.word	0x00000024

023fe4d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fe4d8:	b509      	push	{r0, r3, lr}
 23fe4da:	4804      	ldr	r0, [pc, #16]	; (23fe4ec <hal_usart_flush+0x14>)
 23fe4dc:	6800      	ldr	r0, [r0, #0]
 23fe4de:	4b04      	ldr	r3, [pc, #16]	; (23fe4f0 <hal_usart_flush+0x18>)
 23fe4e0:	4403      	add	r3, r0
 23fe4e2:	681b      	ldr	r3, [r3, #0]
 23fe4e4:	69db      	ldr	r3, [r3, #28]
 23fe4e6:	9302      	str	r3, [sp, #8]
 23fe4e8:	bd09      	pop	{r0, r3, pc}
 23fe4ea:	0000      	.short	0x0000
 23fe4ec:	1007ad98 	.word	0x1007ad98
 23fe4f0:	00000024 	.word	0x00000024

023fe4f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fe4f4:	b509      	push	{r0, r3, lr}
 23fe4f6:	4804      	ldr	r0, [pc, #16]	; (23fe508 <hal_usart_is_enabled+0x14>)
 23fe4f8:	6800      	ldr	r0, [r0, #0]
 23fe4fa:	4b04      	ldr	r3, [pc, #16]	; (23fe50c <hal_usart_is_enabled+0x18>)
 23fe4fc:	4403      	add	r3, r0
 23fe4fe:	681b      	ldr	r3, [r3, #0]
 23fe500:	6a1b      	ldr	r3, [r3, #32]
 23fe502:	9302      	str	r3, [sp, #8]
 23fe504:	bd09      	pop	{r0, r3, pc}
 23fe506:	0000      	.short	0x0000
 23fe508:	1007ad98 	.word	0x1007ad98
 23fe50c:	00000024 	.word	0x00000024

023fe510 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fe510:	b509      	push	{r0, r3, lr}
 23fe512:	4804      	ldr	r0, [pc, #16]	; (23fe524 <hal_usart_available_data_for_write+0x14>)
 23fe514:	6800      	ldr	r0, [r0, #0]
 23fe516:	4b04      	ldr	r3, [pc, #16]	; (23fe528 <hal_usart_available_data_for_write+0x18>)
 23fe518:	4403      	add	r3, r0
 23fe51a:	681b      	ldr	r3, [r3, #0]
 23fe51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe51e:	9302      	str	r3, [sp, #8]
 23fe520:	bd09      	pop	{r0, r3, pc}
 23fe522:	0000      	.short	0x0000
 23fe524:	1007ad98 	.word	0x1007ad98
 23fe528:	00000024 	.word	0x00000024

023fe52c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fe52c:	b509      	push	{r0, r3, lr}
 23fe52e:	4804      	ldr	r0, [pc, #16]	; (23fe540 <hal_usart_init_ex+0x14>)
 23fe530:	6800      	ldr	r0, [r0, #0]
 23fe532:	4b04      	ldr	r3, [pc, #16]	; (23fe544 <hal_usart_init_ex+0x18>)
 23fe534:	4403      	add	r3, r0
 23fe536:	681b      	ldr	r3, [r3, #0]
 23fe538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe53a:	9302      	str	r3, [sp, #8]
 23fe53c:	bd09      	pop	{r0, r3, pc}
 23fe53e:	0000      	.short	0x0000
 23fe540:	1007ad98 	.word	0x1007ad98
 23fe544:	00000024 	.word	0x00000024

023fe548 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fe548:	b509      	push	{r0, r3, lr}
 23fe54a:	4804      	ldr	r0, [pc, #16]	; (23fe55c <HAL_USB_USART_Init+0x14>)
 23fe54c:	6800      	ldr	r0, [r0, #0]
 23fe54e:	4b04      	ldr	r3, [pc, #16]	; (23fe560 <HAL_USB_USART_Init+0x18>)
 23fe550:	4403      	add	r3, r0
 23fe552:	681b      	ldr	r3, [r3, #0]
 23fe554:	681b      	ldr	r3, [r3, #0]
 23fe556:	9302      	str	r3, [sp, #8]
 23fe558:	bd09      	pop	{r0, r3, pc}
 23fe55a:	0000      	.short	0x0000
 23fe55c:	1007ad98 	.word	0x1007ad98
 23fe560:	00000034 	.word	0x00000034

023fe564 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fe564:	b509      	push	{r0, r3, lr}
 23fe566:	4804      	ldr	r0, [pc, #16]	; (23fe578 <HAL_USB_USART_Available_Data+0x14>)
 23fe568:	6800      	ldr	r0, [r0, #0]
 23fe56a:	4b04      	ldr	r3, [pc, #16]	; (23fe57c <HAL_USB_USART_Available_Data+0x18>)
 23fe56c:	4403      	add	r3, r0
 23fe56e:	681b      	ldr	r3, [r3, #0]
 23fe570:	691b      	ldr	r3, [r3, #16]
 23fe572:	9302      	str	r3, [sp, #8]
 23fe574:	bd09      	pop	{r0, r3, pc}
 23fe576:	0000      	.short	0x0000
 23fe578:	1007ad98 	.word	0x1007ad98
 23fe57c:	00000034 	.word	0x00000034

023fe580 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fe580:	b509      	push	{r0, r3, lr}
 23fe582:	4804      	ldr	r0, [pc, #16]	; (23fe594 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fe584:	6800      	ldr	r0, [r0, #0]
 23fe586:	4b04      	ldr	r3, [pc, #16]	; (23fe598 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fe588:	4403      	add	r3, r0
 23fe58a:	681b      	ldr	r3, [r3, #0]
 23fe58c:	695b      	ldr	r3, [r3, #20]
 23fe58e:	9302      	str	r3, [sp, #8]
 23fe590:	bd09      	pop	{r0, r3, pc}
 23fe592:	0000      	.short	0x0000
 23fe594:	1007ad98 	.word	0x1007ad98
 23fe598:	00000034 	.word	0x00000034

023fe59c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe59c:	b509      	push	{r0, r3, lr}
 23fe59e:	4804      	ldr	r0, [pc, #16]	; (23fe5b0 <HAL_USB_USART_Receive_Data+0x14>)
 23fe5a0:	6800      	ldr	r0, [r0, #0]
 23fe5a2:	4b04      	ldr	r3, [pc, #16]	; (23fe5b4 <HAL_USB_USART_Receive_Data+0x18>)
 23fe5a4:	4403      	add	r3, r0
 23fe5a6:	681b      	ldr	r3, [r3, #0]
 23fe5a8:	699b      	ldr	r3, [r3, #24]
 23fe5aa:	9302      	str	r3, [sp, #8]
 23fe5ac:	bd09      	pop	{r0, r3, pc}
 23fe5ae:	0000      	.short	0x0000
 23fe5b0:	1007ad98 	.word	0x1007ad98
 23fe5b4:	00000034 	.word	0x00000034

023fe5b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe5b8:	b509      	push	{r0, r3, lr}
 23fe5ba:	4804      	ldr	r0, [pc, #16]	; (23fe5cc <HAL_USB_USART_Send_Data+0x14>)
 23fe5bc:	6800      	ldr	r0, [r0, #0]
 23fe5be:	4b04      	ldr	r3, [pc, #16]	; (23fe5d0 <HAL_USB_USART_Send_Data+0x18>)
 23fe5c0:	4403      	add	r3, r0
 23fe5c2:	681b      	ldr	r3, [r3, #0]
 23fe5c4:	69db      	ldr	r3, [r3, #28]
 23fe5c6:	9302      	str	r3, [sp, #8]
 23fe5c8:	bd09      	pop	{r0, r3, pc}
 23fe5ca:	0000      	.short	0x0000
 23fe5cc:	1007ad98 	.word	0x1007ad98
 23fe5d0:	00000034 	.word	0x00000034

023fe5d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fe5d4:	b509      	push	{r0, r3, lr}
 23fe5d6:	4804      	ldr	r0, [pc, #16]	; (23fe5e8 <HAL_USB_USART_Flush_Data+0x14>)
 23fe5d8:	6800      	ldr	r0, [r0, #0]
 23fe5da:	4b04      	ldr	r3, [pc, #16]	; (23fe5ec <HAL_USB_USART_Flush_Data+0x18>)
 23fe5dc:	4403      	add	r3, r0
 23fe5de:	681b      	ldr	r3, [r3, #0]
 23fe5e0:	6a1b      	ldr	r3, [r3, #32]
 23fe5e2:	9302      	str	r3, [sp, #8]
 23fe5e4:	bd09      	pop	{r0, r3, pc}
 23fe5e6:	0000      	.short	0x0000
 23fe5e8:	1007ad98 	.word	0x1007ad98
 23fe5ec:	00000034 	.word	0x00000034

023fe5f0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fe5f0:	b509      	push	{r0, r3, lr}
 23fe5f2:	4804      	ldr	r0, [pc, #16]	; (23fe604 <log_message_v+0x14>)
 23fe5f4:	6800      	ldr	r0, [r0, #0]
 23fe5f6:	4b04      	ldr	r3, [pc, #16]	; (23fe608 <log_message_v+0x18>)
 23fe5f8:	4403      	add	r3, r0
 23fe5fa:	681b      	ldr	r3, [r3, #0]
 23fe5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe5fe:	9302      	str	r3, [sp, #8]
 23fe600:	bd09      	pop	{r0, r3, pc}
 23fe602:	0000      	.short	0x0000
 23fe604:	1007ad98 	.word	0x1007ad98
 23fe608:	00000048 	.word	0x00000048

023fe60c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fe60c:	b509      	push	{r0, r3, lr}
 23fe60e:	4804      	ldr	r0, [pc, #16]	; (23fe620 <set_system_mode+0x14>)
 23fe610:	6800      	ldr	r0, [r0, #0]
 23fe612:	4b04      	ldr	r3, [pc, #16]	; (23fe624 <set_system_mode+0x18>)
 23fe614:	4403      	add	r3, r0
 23fe616:	681b      	ldr	r3, [r3, #0]
 23fe618:	685b      	ldr	r3, [r3, #4]
 23fe61a:	9302      	str	r3, [sp, #8]
 23fe61c:	bd09      	pop	{r0, r3, pc}
 23fe61e:	0000      	.short	0x0000
 23fe620:	1007ad98 	.word	0x1007ad98
 23fe624:	00000008 	.word	0x00000008

023fe628 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fe628:	b509      	push	{r0, r3, lr}
 23fe62a:	4804      	ldr	r0, [pc, #16]	; (23fe63c <system_thread_set_state+0x14>)
 23fe62c:	6800      	ldr	r0, [r0, #0]
 23fe62e:	4b04      	ldr	r3, [pc, #16]	; (23fe640 <system_thread_set_state+0x18>)
 23fe630:	4403      	add	r3, r0
 23fe632:	681b      	ldr	r3, [r3, #0]
 23fe634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe636:	9302      	str	r3, [sp, #8]
 23fe638:	bd09      	pop	{r0, r3, pc}
 23fe63a:	0000      	.short	0x0000
 23fe63c:	1007ad98 	.word	0x1007ad98
 23fe640:	00000008 	.word	0x00000008

023fe644 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fe644:	b509      	push	{r0, r3, lr}
 23fe646:	4804      	ldr	r0, [pc, #16]	; (23fe658 <application_thread_current+0x14>)
 23fe648:	6800      	ldr	r0, [r0, #0]
 23fe64a:	4b04      	ldr	r3, [pc, #16]	; (23fe65c <application_thread_current+0x18>)
 23fe64c:	4403      	add	r3, r0
 23fe64e:	681b      	ldr	r3, [r3, #0]
 23fe650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fe652:	9302      	str	r3, [sp, #8]
 23fe654:	bd09      	pop	{r0, r3, pc}
 23fe656:	0000      	.short	0x0000
 23fe658:	1007ad98 	.word	0x1007ad98
 23fe65c:	00000008 	.word	0x00000008

023fe660 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fe660:	b509      	push	{r0, r3, lr}
 23fe662:	4804      	ldr	r0, [pc, #16]	; (23fe674 <application_thread_invoke+0x14>)
 23fe664:	6800      	ldr	r0, [r0, #0]
 23fe666:	4b04      	ldr	r3, [pc, #16]	; (23fe678 <application_thread_invoke+0x18>)
 23fe668:	4403      	add	r3, r0
 23fe66a:	681b      	ldr	r3, [r3, #0]
 23fe66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe66e:	9302      	str	r3, [sp, #8]
 23fe670:	bd09      	pop	{r0, r3, pc}
 23fe672:	0000      	.short	0x0000
 23fe674:	1007ad98 	.word	0x1007ad98
 23fe678:	00000008 	.word	0x00000008

023fe67c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fe67c:	b509      	push	{r0, r3, lr}
 23fe67e:	4804      	ldr	r0, [pc, #16]	; (23fe690 <system_ctrl_set_app_request_handler+0x14>)
 23fe680:	6800      	ldr	r0, [r0, #0]
 23fe682:	4b04      	ldr	r3, [pc, #16]	; (23fe694 <system_ctrl_set_app_request_handler+0x18>)
 23fe684:	4403      	add	r3, r0
 23fe686:	681b      	ldr	r3, [r3, #0]
 23fe688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fe68c:	9302      	str	r3, [sp, #8]
 23fe68e:	bd09      	pop	{r0, r3, pc}
 23fe690:	1007ad98 	.word	0x1007ad98
 23fe694:	00000008 	.word	0x00000008

023fe698 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fe698:	b509      	push	{r0, r3, lr}
 23fe69a:	4804      	ldr	r0, [pc, #16]	; (23fe6ac <system_ctrl_set_result+0x14>)
 23fe69c:	6800      	ldr	r0, [r0, #0]
 23fe69e:	4b04      	ldr	r3, [pc, #16]	; (23fe6b0 <system_ctrl_set_result+0x18>)
 23fe6a0:	4403      	add	r3, r0
 23fe6a2:	681b      	ldr	r3, [r3, #0]
 23fe6a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fe6a8:	9302      	str	r3, [sp, #8]
 23fe6aa:	bd09      	pop	{r0, r3, pc}
 23fe6ac:	1007ad98 	.word	0x1007ad98
 23fe6b0:	00000008 	.word	0x00000008

023fe6b4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fe6b4:	b509      	push	{r0, r3, lr}
 23fe6b6:	4804      	ldr	r0, [pc, #16]	; (23fe6c8 <spark_cloud_flag_connected+0x14>)
 23fe6b8:	6800      	ldr	r0, [r0, #0]
 23fe6ba:	4b04      	ldr	r3, [pc, #16]	; (23fe6cc <spark_cloud_flag_connected+0x18>)
 23fe6bc:	4403      	add	r3, r0
 23fe6be:	681b      	ldr	r3, [r3, #0]
 23fe6c0:	695b      	ldr	r3, [r3, #20]
 23fe6c2:	9302      	str	r3, [sp, #8]
 23fe6c4:	bd09      	pop	{r0, r3, pc}
 23fe6c6:	0000      	.short	0x0000
 23fe6c8:	1007ad98 	.word	0x1007ad98
 23fe6cc:	0000002c 	.word	0x0000002c

023fe6d0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fe6d0:	b509      	push	{r0, r3, lr}
 23fe6d2:	4804      	ldr	r0, [pc, #16]	; (23fe6e4 <spark_send_event+0x14>)
 23fe6d4:	6800      	ldr	r0, [r0, #0]
 23fe6d6:	4b04      	ldr	r3, [pc, #16]	; (23fe6e8 <spark_send_event+0x18>)
 23fe6d8:	4403      	add	r3, r0
 23fe6da:	681b      	ldr	r3, [r3, #0]
 23fe6dc:	6a1b      	ldr	r3, [r3, #32]
 23fe6de:	9302      	str	r3, [sp, #8]
 23fe6e0:	bd09      	pop	{r0, r3, pc}
 23fe6e2:	0000      	.short	0x0000
 23fe6e4:	1007ad98 	.word	0x1007ad98
 23fe6e8:	0000002c 	.word	0x0000002c

023fe6ec <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 23fe6ec:	b509      	push	{r0, r3, lr}
 23fe6ee:	4804      	ldr	r0, [pc, #16]	; (23fe700 <spark_subscribe+0x14>)
 23fe6f0:	6800      	ldr	r0, [r0, #0]
 23fe6f2:	4b04      	ldr	r3, [pc, #16]	; (23fe704 <spark_subscribe+0x18>)
 23fe6f4:	4403      	add	r3, r0
 23fe6f6:	681b      	ldr	r3, [r3, #0]
 23fe6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe6fa:	9302      	str	r3, [sp, #8]
 23fe6fc:	bd09      	pop	{r0, r3, pc}
 23fe6fe:	0000      	.short	0x0000
 23fe700:	1007ad98 	.word	0x1007ad98
 23fe704:	0000002c 	.word	0x0000002c

023fe708 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fe708:	b509      	push	{r0, r3, lr}
 23fe70a:	4804      	ldr	r0, [pc, #16]	; (23fe71c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fe70c:	6800      	ldr	r0, [r0, #0]
 23fe70e:	4b04      	ldr	r3, [pc, #16]	; (23fe720 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fe710:	4403      	add	r3, r0
 23fe712:	681b      	ldr	r3, [r3, #0]
 23fe714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe716:	9302      	str	r3, [sp, #8]
 23fe718:	bd09      	pop	{r0, r3, pc}
 23fe71a:	0000      	.short	0x0000
 23fe71c:	1007ad98 	.word	0x1007ad98
 23fe720:	0000002c 	.word	0x0000002c

023fe724 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe724:	b509      	push	{r0, r3, lr}
 23fe726:	4804      	ldr	r0, [pc, #16]	; (23fe738 <network_connect+0x14>)
 23fe728:	6800      	ldr	r0, [r0, #0]
 23fe72a:	4b04      	ldr	r3, [pc, #16]	; (23fe73c <network_connect+0x18>)
 23fe72c:	4403      	add	r3, r0
 23fe72e:	681b      	ldr	r3, [r3, #0]
 23fe730:	685b      	ldr	r3, [r3, #4]
 23fe732:	9302      	str	r3, [sp, #8]
 23fe734:	bd09      	pop	{r0, r3, pc}
 23fe736:	0000      	.short	0x0000
 23fe738:	1007ad98 	.word	0x1007ad98
 23fe73c:	00000028 	.word	0x00000028

023fe740 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fe740:	b509      	push	{r0, r3, lr}
 23fe742:	4804      	ldr	r0, [pc, #16]	; (23fe754 <network_connecting+0x14>)
 23fe744:	6800      	ldr	r0, [r0, #0]
 23fe746:	4b04      	ldr	r3, [pc, #16]	; (23fe758 <network_connecting+0x18>)
 23fe748:	4403      	add	r3, r0
 23fe74a:	681b      	ldr	r3, [r3, #0]
 23fe74c:	689b      	ldr	r3, [r3, #8]
 23fe74e:	9302      	str	r3, [sp, #8]
 23fe750:	bd09      	pop	{r0, r3, pc}
 23fe752:	0000      	.short	0x0000
 23fe754:	1007ad98 	.word	0x1007ad98
 23fe758:	00000028 	.word	0x00000028

023fe75c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fe75c:	b509      	push	{r0, r3, lr}
 23fe75e:	4804      	ldr	r0, [pc, #16]	; (23fe770 <network_disconnect+0x14>)
 23fe760:	6800      	ldr	r0, [r0, #0]
 23fe762:	4b04      	ldr	r3, [pc, #16]	; (23fe774 <network_disconnect+0x18>)
 23fe764:	4403      	add	r3, r0
 23fe766:	681b      	ldr	r3, [r3, #0]
 23fe768:	68db      	ldr	r3, [r3, #12]
 23fe76a:	9302      	str	r3, [sp, #8]
 23fe76c:	bd09      	pop	{r0, r3, pc}
 23fe76e:	0000      	.short	0x0000
 23fe770:	1007ad98 	.word	0x1007ad98
 23fe774:	00000028 	.word	0x00000028

023fe778 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fe778:	b509      	push	{r0, r3, lr}
 23fe77a:	4804      	ldr	r0, [pc, #16]	; (23fe78c <network_ready+0x14>)
 23fe77c:	6800      	ldr	r0, [r0, #0]
 23fe77e:	4b04      	ldr	r3, [pc, #16]	; (23fe790 <network_ready+0x18>)
 23fe780:	4403      	add	r3, r0
 23fe782:	681b      	ldr	r3, [r3, #0]
 23fe784:	691b      	ldr	r3, [r3, #16]
 23fe786:	9302      	str	r3, [sp, #8]
 23fe788:	bd09      	pop	{r0, r3, pc}
 23fe78a:	0000      	.short	0x0000
 23fe78c:	1007ad98 	.word	0x1007ad98
 23fe790:	00000028 	.word	0x00000028

023fe794 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe794:	b509      	push	{r0, r3, lr}
 23fe796:	4804      	ldr	r0, [pc, #16]	; (23fe7a8 <network_on+0x14>)
 23fe798:	6800      	ldr	r0, [r0, #0]
 23fe79a:	4b04      	ldr	r3, [pc, #16]	; (23fe7ac <network_on+0x18>)
 23fe79c:	4403      	add	r3, r0
 23fe79e:	681b      	ldr	r3, [r3, #0]
 23fe7a0:	695b      	ldr	r3, [r3, #20]
 23fe7a2:	9302      	str	r3, [sp, #8]
 23fe7a4:	bd09      	pop	{r0, r3, pc}
 23fe7a6:	0000      	.short	0x0000
 23fe7a8:	1007ad98 	.word	0x1007ad98
 23fe7ac:	00000028 	.word	0x00000028

023fe7b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe7b0:	b509      	push	{r0, r3, lr}
 23fe7b2:	4804      	ldr	r0, [pc, #16]	; (23fe7c4 <network_off+0x14>)
 23fe7b4:	6800      	ldr	r0, [r0, #0]
 23fe7b6:	4b04      	ldr	r3, [pc, #16]	; (23fe7c8 <network_off+0x18>)
 23fe7b8:	4403      	add	r3, r0
 23fe7ba:	681b      	ldr	r3, [r3, #0]
 23fe7bc:	699b      	ldr	r3, [r3, #24]
 23fe7be:	9302      	str	r3, [sp, #8]
 23fe7c0:	bd09      	pop	{r0, r3, pc}
 23fe7c2:	0000      	.short	0x0000
 23fe7c4:	1007ad98 	.word	0x1007ad98
 23fe7c8:	00000028 	.word	0x00000028

023fe7cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fe7cc:	b509      	push	{r0, r3, lr}
 23fe7ce:	4804      	ldr	r0, [pc, #16]	; (23fe7e0 <network_listen+0x14>)
 23fe7d0:	6800      	ldr	r0, [r0, #0]
 23fe7d2:	4b04      	ldr	r3, [pc, #16]	; (23fe7e4 <network_listen+0x18>)
 23fe7d4:	4403      	add	r3, r0
 23fe7d6:	681b      	ldr	r3, [r3, #0]
 23fe7d8:	69db      	ldr	r3, [r3, #28]
 23fe7da:	9302      	str	r3, [sp, #8]
 23fe7dc:	bd09      	pop	{r0, r3, pc}
 23fe7de:	0000      	.short	0x0000
 23fe7e0:	1007ad98 	.word	0x1007ad98
 23fe7e4:	00000028 	.word	0x00000028

023fe7e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fe7e8:	b509      	push	{r0, r3, lr}
 23fe7ea:	4804      	ldr	r0, [pc, #16]	; (23fe7fc <network_listening+0x14>)
 23fe7ec:	6800      	ldr	r0, [r0, #0]
 23fe7ee:	4b04      	ldr	r3, [pc, #16]	; (23fe800 <network_listening+0x18>)
 23fe7f0:	4403      	add	r3, r0
 23fe7f2:	681b      	ldr	r3, [r3, #0]
 23fe7f4:	6a1b      	ldr	r3, [r3, #32]
 23fe7f6:	9302      	str	r3, [sp, #8]
 23fe7f8:	bd09      	pop	{r0, r3, pc}
 23fe7fa:	0000      	.short	0x0000
 23fe7fc:	1007ad98 	.word	0x1007ad98
 23fe800:	00000028 	.word	0x00000028

023fe804 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fe804:	b509      	push	{r0, r3, lr}
 23fe806:	4804      	ldr	r0, [pc, #16]	; (23fe818 <network_set_listen_timeout+0x14>)
 23fe808:	6800      	ldr	r0, [r0, #0]
 23fe80a:	4b04      	ldr	r3, [pc, #16]	; (23fe81c <network_set_listen_timeout+0x18>)
 23fe80c:	4403      	add	r3, r0
 23fe80e:	681b      	ldr	r3, [r3, #0]
 23fe810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe812:	9302      	str	r3, [sp, #8]
 23fe814:	bd09      	pop	{r0, r3, pc}
 23fe816:	0000      	.short	0x0000
 23fe818:	1007ad98 	.word	0x1007ad98
 23fe81c:	00000028 	.word	0x00000028

023fe820 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fe820:	b509      	push	{r0, r3, lr}
 23fe822:	4804      	ldr	r0, [pc, #16]	; (23fe834 <network_get_listen_timeout+0x14>)
 23fe824:	6800      	ldr	r0, [r0, #0]
 23fe826:	4b04      	ldr	r3, [pc, #16]	; (23fe838 <network_get_listen_timeout+0x18>)
 23fe828:	4403      	add	r3, r0
 23fe82a:	681b      	ldr	r3, [r3, #0]
 23fe82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe82e:	9302      	str	r3, [sp, #8]
 23fe830:	bd09      	pop	{r0, r3, pc}
 23fe832:	0000      	.short	0x0000
 23fe834:	1007ad98 	.word	0x1007ad98
 23fe838:	00000028 	.word	0x00000028

023fe83c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fe83c:	b509      	push	{r0, r3, lr}
 23fe83e:	4804      	ldr	r0, [pc, #16]	; (23fe850 <network_is_on+0x14>)
 23fe840:	6800      	ldr	r0, [r0, #0]
 23fe842:	4b04      	ldr	r3, [pc, #16]	; (23fe854 <network_is_on+0x18>)
 23fe844:	4403      	add	r3, r0
 23fe846:	681b      	ldr	r3, [r3, #0]
 23fe848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe84a:	9302      	str	r3, [sp, #8]
 23fe84c:	bd09      	pop	{r0, r3, pc}
 23fe84e:	0000      	.short	0x0000
 23fe850:	1007ad98 	.word	0x1007ad98
 23fe854:	00000028 	.word	0x00000028

023fe858 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fe858:	b509      	push	{r0, r3, lr}
 23fe85a:	4804      	ldr	r0, [pc, #16]	; (23fe86c <network_is_off+0x14>)
 23fe85c:	6800      	ldr	r0, [r0, #0]
 23fe85e:	4b04      	ldr	r3, [pc, #16]	; (23fe870 <network_is_off+0x18>)
 23fe860:	4403      	add	r3, r0
 23fe862:	681b      	ldr	r3, [r3, #0]
 23fe864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe866:	9302      	str	r3, [sp, #8]
 23fe868:	bd09      	pop	{r0, r3, pc}
 23fe86a:	0000      	.short	0x0000
 23fe86c:	1007ad98 	.word	0x1007ad98
 23fe870:	00000028 	.word	0x00000028

023fe874 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fe874:	b509      	push	{r0, r3, lr}
 23fe876:	4804      	ldr	r0, [pc, #16]	; (23fe888 <malloc+0x14>)
 23fe878:	6800      	ldr	r0, [r0, #0]
 23fe87a:	4b04      	ldr	r3, [pc, #16]	; (23fe88c <malloc+0x18>)
 23fe87c:	4403      	add	r3, r0
 23fe87e:	681b      	ldr	r3, [r3, #0]
 23fe880:	681b      	ldr	r3, [r3, #0]
 23fe882:	9302      	str	r3, [sp, #8]
 23fe884:	bd09      	pop	{r0, r3, pc}
 23fe886:	0000      	.short	0x0000
 23fe888:	1007ad98 	.word	0x1007ad98
 23fe88c:	00000004 	.word	0x00000004

023fe890 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fe890:	b509      	push	{r0, r3, lr}
 23fe892:	4804      	ldr	r0, [pc, #16]	; (23fe8a4 <free+0x14>)
 23fe894:	6800      	ldr	r0, [r0, #0]
 23fe896:	4b04      	ldr	r3, [pc, #16]	; (23fe8a8 <free+0x18>)
 23fe898:	4403      	add	r3, r0
 23fe89a:	681b      	ldr	r3, [r3, #0]
 23fe89c:	685b      	ldr	r3, [r3, #4]
 23fe89e:	9302      	str	r3, [sp, #8]
 23fe8a0:	bd09      	pop	{r0, r3, pc}
 23fe8a2:	0000      	.short	0x0000
 23fe8a4:	1007ad98 	.word	0x1007ad98
 23fe8a8:	00000004 	.word	0x00000004

023fe8ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fe8ac:	b509      	push	{r0, r3, lr}
 23fe8ae:	4804      	ldr	r0, [pc, #16]	; (23fe8c0 <realloc+0x14>)
 23fe8b0:	6800      	ldr	r0, [r0, #0]
 23fe8b2:	4b04      	ldr	r3, [pc, #16]	; (23fe8c4 <realloc+0x18>)
 23fe8b4:	4403      	add	r3, r0
 23fe8b6:	681b      	ldr	r3, [r3, #0]
 23fe8b8:	689b      	ldr	r3, [r3, #8]
 23fe8ba:	9302      	str	r3, [sp, #8]
 23fe8bc:	bd09      	pop	{r0, r3, pc}
 23fe8be:	0000      	.short	0x0000
 23fe8c0:	1007ad98 	.word	0x1007ad98
 23fe8c4:	00000004 	.word	0x00000004

023fe8c8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fe8c8:	b509      	push	{r0, r3, lr}
 23fe8ca:	4804      	ldr	r0, [pc, #16]	; (23fe8dc <abort+0x14>)
 23fe8cc:	6800      	ldr	r0, [r0, #0]
 23fe8ce:	4b04      	ldr	r3, [pc, #16]	; (23fe8e0 <abort+0x18>)
 23fe8d0:	4403      	add	r3, r0
 23fe8d2:	681b      	ldr	r3, [r3, #0]
 23fe8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe8d6:	9302      	str	r3, [sp, #8]
 23fe8d8:	bd09      	pop	{r0, r3, pc}
 23fe8da:	0000      	.short	0x0000
 23fe8dc:	1007ad98 	.word	0x1007ad98
 23fe8e0:	00000004 	.word	0x00000004

023fe8e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fe8e4:	b509      	push	{r0, r3, lr}
 23fe8e6:	4804      	ldr	r0, [pc, #16]	; (23fe8f8 <_malloc_r+0x14>)
 23fe8e8:	6800      	ldr	r0, [r0, #0]
 23fe8ea:	4b04      	ldr	r3, [pc, #16]	; (23fe8fc <_malloc_r+0x18>)
 23fe8ec:	4403      	add	r3, r0
 23fe8ee:	681b      	ldr	r3, [r3, #0]
 23fe8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe8f2:	9302      	str	r3, [sp, #8]
 23fe8f4:	bd09      	pop	{r0, r3, pc}
 23fe8f6:	0000      	.short	0x0000
 23fe8f8:	1007ad98 	.word	0x1007ad98
 23fe8fc:	00000004 	.word	0x00000004

023fe900 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fe900:	b509      	push	{r0, r3, lr}
 23fe902:	4804      	ldr	r0, [pc, #16]	; (23fe914 <__assert_func+0x14>)
 23fe904:	6800      	ldr	r0, [r0, #0]
 23fe906:	4b04      	ldr	r3, [pc, #16]	; (23fe918 <__assert_func+0x18>)
 23fe908:	4403      	add	r3, r0
 23fe90a:	681b      	ldr	r3, [r3, #0]
 23fe90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe90e:	9302      	str	r3, [sp, #8]
 23fe910:	bd09      	pop	{r0, r3, pc}
 23fe912:	0000      	.short	0x0000
 23fe914:	1007ad98 	.word	0x1007ad98
 23fe918:	00000004 	.word	0x00000004

023fe91c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fe91c:	b509      	push	{r0, r3, lr}
 23fe91e:	4804      	ldr	r0, [pc, #16]	; (23fe930 <newlib_impure_ptr_callback+0x14>)
 23fe920:	6800      	ldr	r0, [r0, #0]
 23fe922:	4b04      	ldr	r3, [pc, #16]	; (23fe934 <newlib_impure_ptr_callback+0x18>)
 23fe924:	4403      	add	r3, r0
 23fe926:	681b      	ldr	r3, [r3, #0]
 23fe928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe92a:	9302      	str	r3, [sp, #8]
 23fe92c:	bd09      	pop	{r0, r3, pc}
 23fe92e:	0000      	.short	0x0000
 23fe930:	1007ad98 	.word	0x1007ad98
 23fe934:	00000004 	.word	0x00000004

023fe938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fe938:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fe93a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fe93c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fe93e:	b17c      	cbz	r4, 23fe960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fe940:	6863      	ldr	r3, [r4, #4]
 23fe942:	3b01      	subs	r3, #1
 23fe944:	6063      	str	r3, [r4, #4]
 23fe946:	b95b      	cbnz	r3, 23fe960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fe948:	6823      	ldr	r3, [r4, #0]
 23fe94a:	4620      	mov	r0, r4
 23fe94c:	689b      	ldr	r3, [r3, #8]
 23fe94e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fe950:	68a3      	ldr	r3, [r4, #8]
 23fe952:	3b01      	subs	r3, #1
 23fe954:	60a3      	str	r3, [r4, #8]
 23fe956:	b91b      	cbnz	r3, 23fe960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fe958:	6823      	ldr	r3, [r4, #0]
 23fe95a:	4620      	mov	r0, r4
 23fe95c:	68db      	ldr	r3, [r3, #12]
 23fe95e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fe960:	4628      	mov	r0, r5
 23fe962:	bd38      	pop	{r3, r4, r5, pc}

023fe964 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fe964:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fe966:	6883      	ldr	r3, [r0, #8]
 23fe968:	4604      	mov	r4, r0
 23fe96a:	b90b      	cbnz	r3, 23fe970 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fe96c:	f001 f8e0 	bl	23ffb30 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe970:	68c3      	ldr	r3, [r0, #12]
 23fe972:	4798      	blx	r3
      if (_M_manager)
 23fe974:	68a3      	ldr	r3, [r4, #8]
 23fe976:	b11b      	cbz	r3, 23fe980 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe978:	2203      	movs	r2, #3
 23fe97a:	4621      	mov	r1, r4
 23fe97c:	4620      	mov	r0, r4
 23fe97e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fe980:	4620      	mov	r0, r4
}
 23fe982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fe986:	2110      	movs	r1, #16
 23fe988:	f7ff ba9f 	b.w	23fdeca <_ZdlPvj>

023fe98c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fe98c:	b510      	push	{r4, lr}
      if (_M_manager)
 23fe98e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fe990:	4604      	mov	r4, r0
      if (_M_manager)
 23fe992:	b113      	cbz	r3, 23fe99a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe994:	2203      	movs	r2, #3
 23fe996:	4601      	mov	r1, r0
 23fe998:	4798      	blx	r3
    }
 23fe99a:	4620      	mov	r0, r4
 23fe99c:	bd10      	pop	{r4, pc}

023fe99e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fe99e:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe9a0:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fe9a2:	460b      	mov	r3, r1
 23fe9a4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe9a6:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe9aa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fe9ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fe9b2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fe9b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fe9ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fe9be:	b002      	add	sp, #8
 23fe9c0:	bd10      	pop	{r4, pc}
	...

023fe9c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fe9c4:	2300      	movs	r3, #0
 23fe9c6:	4802      	ldr	r0, [pc, #8]	; (23fe9d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fe9c8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fe9ca:	f7ff bc27 	b.w	23fe21c <os_mutex_recursive_create>
 23fe9ce:	bf00      	nop
 23fe9d0:	1007ae80 	.word	0x1007ae80

023fe9d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe9d4:	4770      	bx	lr

023fe9d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fe9d6:	2000      	movs	r0, #0
 23fe9d8:	4770      	bx	lr

023fe9da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe9da:	b510      	push	{r4, lr}
 23fe9dc:	4604      	mov	r4, r0
 23fe9de:	2110      	movs	r1, #16
 23fe9e0:	f7ff fa73 	bl	23fdeca <_ZdlPvj>
 23fe9e4:	4620      	mov	r0, r4
 23fe9e6:	bd10      	pop	{r4, pc}

023fe9e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fe9e8:	b508      	push	{r3, lr}
      { delete this; }
 23fe9ea:	f7ff fff6 	bl	23fe9da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fe9ee:	bd08      	pop	{r3, pc}

023fe9f0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fe9f0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fe9f2:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fe9f4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fe9f8:	6002      	str	r2, [r0, #0]
 23fe9fa:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe9fc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe9fe:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fea00:	680c      	ldr	r4, [r1, #0]
 23fea02:	8085      	strh	r5, [r0, #4]
 23fea04:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fea06:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fea08:	bd30      	pop	{r4, r5, pc}

023fea0a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fea0a:	b510      	push	{r4, lr}
 23fea0c:	4604      	mov	r4, r0
    free((void*)msg_);
 23fea0e:	6800      	ldr	r0, [r0, #0]
 23fea10:	f7ff ff3e 	bl	23fe890 <free>
}
 23fea14:	4620      	mov	r0, r4
 23fea16:	bd10      	pop	{r4, pc}

023fea18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fea18:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fea1a:	68c4      	ldr	r4, [r0, #12]
 23fea1c:	b314      	cbz	r4, 23fea64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fea1e:	7823      	ldrb	r3, [r4, #0]
 23fea20:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fea22:	2b02      	cmp	r3, #2
 23fea24:	d103      	bne.n	23fea2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fea26:	f104 000c 	add.w	r0, r4, #12
 23fea2a:	f7ff ffee 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fea2e:	1d23      	adds	r3, r4, #4
 23fea30:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fea32:	b135      	cbz	r5, 23fea42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fea34:	4628      	mov	r0, r5
 23fea36:	f7ff ffa9 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
 23fea3a:	2110      	movs	r1, #16
 23fea3c:	4628      	mov	r0, r5
 23fea3e:	f7ff fa44 	bl	23fdeca <_ZdlPvj>
 23fea42:	f104 0308 	add.w	r3, r4, #8
 23fea46:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fea48:	b135      	cbz	r5, 23fea58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fea4a:	4628      	mov	r0, r5
 23fea4c:	f7ff ff9e 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
 23fea50:	2110      	movs	r1, #16
 23fea52:	4628      	mov	r0, r5
 23fea54:	f7ff fa39 	bl	23fdeca <_ZdlPvj>
 23fea58:	4620      	mov	r0, r4
 23fea5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fea5e:	2114      	movs	r1, #20
 23fea60:	f7ff ba33 	b.w	23fdeca <_ZdlPvj>
 23fea64:	bd38      	pop	{r3, r4, r5, pc}

023fea66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fea66:	680b      	ldr	r3, [r1, #0]
 23fea68:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fea6a:	684b      	ldr	r3, [r1, #4]
 23fea6c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fea6e:	b113      	cbz	r3, 23fea76 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fea70:	685a      	ldr	r2, [r3, #4]
 23fea72:	3201      	adds	r2, #1
 23fea74:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fea76:	4770      	bx	lr

023fea78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fea78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fea7a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fea7c:	4668      	mov	r0, sp
 23fea7e:	460d      	mov	r5, r1
 23fea80:	f7ff fff1 	bl	23fea66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea84:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fea86:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea88:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fea8a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fea8c:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fea8e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fea90:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fea92:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fea94:	f7ff ff50 	bl	23fe938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fea98:	b135      	cbz	r5, 23feaa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fea9a:	1d28      	adds	r0, r5, #4
 23fea9c:	f7ff ff4c 	bl	23fe938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23feaa0:	2108      	movs	r1, #8
 23feaa2:	4628      	mov	r0, r5
 23feaa4:	f7ff fa11 	bl	23fdeca <_ZdlPvj>
        return p;
    }
 23feaa8:	4620      	mov	r0, r4
 23feaaa:	b003      	add	sp, #12
 23feaac:	bd30      	pop	{r4, r5, pc}

023feaae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23feaae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23feab0:	b510      	push	{r4, lr}
      if (_M_empty())
 23feab2:	b90a      	cbnz	r2, 23feab8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23feab4:	f001 f83c 	bl	23ffb30 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23feab8:	68c3      	ldr	r3, [r0, #12]
    }
 23feaba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23feabe:	4718      	bx	r3

023feac0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23feac0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23feac2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23feac4:	f100 0110 	add.w	r1, r0, #16
 23feac8:	f7ff fff1 	bl	23feaae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23feacc:	bd08      	pop	{r3, pc}

023feace <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23feace:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fead0:	b510      	push	{r4, lr}
      if (_M_empty())
 23fead2:	b90a      	cbnz	r2, 23fead8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fead4:	f001 f82c 	bl	23ffb30 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fead8:	68c3      	ldr	r3, [r0, #12]
    }
 23feada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23feade:	4718      	bx	r3

023feae0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23feae0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23feae2:	6800      	ldr	r0, [r0, #0]
 23feae4:	f100 0110 	add.w	r1, r0, #16
 23feae8:	f7ff fff1 	bl	23feace <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23feaec:	bd08      	pop	{r3, pc}
	...

023feaf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23feaf0:	b538      	push	{r3, r4, r5, lr}
 23feaf2:	2300      	movs	r3, #0
 23feaf4:	4604      	mov	r4, r0
 23feaf6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23feaf8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23feafa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23feafc:	f7ff f9e1 	bl	23fdec2 <_Znwj>
 23feb00:	b128      	cbz	r0, 23feb0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23feb02:	2301      	movs	r3, #1
 23feb04:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23feb08:	4b02      	ldr	r3, [pc, #8]	; (23feb14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23feb0a:	60c5      	str	r5, [r0, #12]
 23feb0c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23feb0e:	6020      	str	r0, [r4, #0]
	}
 23feb10:	4620      	mov	r0, r4
 23feb12:	bd38      	pop	{r3, r4, r5, pc}
 23feb14:	023ffdd4 	.word	0x023ffdd4

023feb18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23feb18:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23feb1a:	2300      	movs	r3, #0
 23feb1c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23feb1e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23feb20:	4604      	mov	r4, r0
 23feb22:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23feb24:	b12b      	cbz	r3, 23feb32 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23feb26:	2202      	movs	r2, #2
 23feb28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23feb2a:	68eb      	ldr	r3, [r5, #12]
 23feb2c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23feb2e:	68ab      	ldr	r3, [r5, #8]
 23feb30:	60a3      	str	r3, [r4, #8]
    }
 23feb32:	4620      	mov	r0, r4
 23feb34:	bd38      	pop	{r3, r4, r5, pc}
	...

023feb38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23feb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 23feb3a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23feb3c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23feb3e:	4668      	mov	r0, sp
 23feb40:	f7ff ff56 	bl	23fe9f0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23feb44:	f04f 0302 	mov.w	r3, #2
 23feb48:	e8d4 2f4f 	ldrexb	r2, [r4]
 23feb4c:	2a00      	cmp	r2, #0
 23feb4e:	d103      	bne.n	23feb58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23feb50:	e8c4 3f41 	strexb	r1, r3, [r4]
 23feb54:	2900      	cmp	r1, #0
 23feb56:	d1f7      	bne.n	23feb48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23feb58:	d121      	bne.n	23feb9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23feb5a:	f104 050c 	add.w	r5, r4, #12
 23feb5e:	4669      	mov	r1, sp
 23feb60:	4628      	mov	r0, r5
 23feb62:	f7ff ff45 	bl	23fe9f0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23feb66:	2201      	movs	r2, #1
 23feb68:	1c63      	adds	r3, r4, #1
 23feb6a:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23feb6e:	2000      	movs	r0, #0
 23feb70:	f104 0308 	add.w	r3, r4, #8
 23feb74:	e8d3 6fef 	ldaex	r6, [r3]
 23feb78:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23feb7c:	2a00      	cmp	r2, #0
 23feb7e:	d1f9      	bne.n	23feb74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23feb80:	b16e      	cbz	r6, 23feb9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23feb82:	f7ff fd5f 	bl	23fe644 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23feb86:	b178      	cbz	r0, 23feba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23feb88:	4629      	mov	r1, r5
 23feb8a:	4630      	mov	r0, r6
 23feb8c:	f7ff ff8f 	bl	23feaae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23feb90:	4630      	mov	r0, r6
 23feb92:	f7ff fefb 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23feb96:	2110      	movs	r1, #16
 23feb98:	4630      	mov	r0, r6
 23feb9a:	f7ff f996 	bl	23fdeca <_ZdlPvj>
        p_->setError(std::move(error));
 23feb9e:	4668      	mov	r0, sp
 23feba0:	f7ff ff33 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
    }
 23feba4:	b009      	add	sp, #36	; 0x24
 23feba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23feba8:	4631      	mov	r1, r6
 23febaa:	a802      	add	r0, sp, #8
 23febac:	f7ff ffb4 	bl	23feb18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23febb0:	68e0      	ldr	r0, [r4, #12]
 23febb2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23febb6:	b108      	cbz	r0, 23febbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23febb8:	f001 f80e 	bl	23ffbd8 <strdup>
        type_(type) {
 23febbc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23febbe:	2010      	movs	r0, #16
 23febc0:	f8ad 501c 	strh.w	r5, [sp, #28]
 23febc4:	f7ff f97d 	bl	23fdec2 <_Znwj>
 23febc8:	4605      	mov	r5, r0
 23febca:	b1e8      	cbz	r0, 23fec08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23febcc:	2700      	movs	r7, #0
 23febce:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23febd0:	2018      	movs	r0, #24
 23febd2:	f7ff f976 	bl	23fdec2 <_Znwj>
 23febd6:	4604      	mov	r4, r0
 23febd8:	b188      	cbz	r0, 23febfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23febda:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23febdc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23febde:	a802      	add	r0, sp, #8
 23febe0:	f7ff fedd 	bl	23fe99e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febe4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23febe6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23febe8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23febec:	9204      	str	r2, [sp, #16]
 23febee:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23febf0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23febf2:	60e3      	str	r3, [r4, #12]
 23febf4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23febf8:	9205      	str	r2, [sp, #20]
 23febfa:	f7ff fef9 	bl	23fe9f0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23febfe:	4b08      	ldr	r3, [pc, #32]	; (23fec20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fec00:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fec02:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fec04:	4b07      	ldr	r3, [pc, #28]	; (23fec24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fec06:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fec08:	a806      	add	r0, sp, #24
 23fec0a:	f7ff fefe 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fec0e:	a802      	add	r0, sp, #8
 23fec10:	f7ff febc 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fec14:	2200      	movs	r2, #0
 23fec16:	4629      	mov	r1, r5
 23fec18:	4803      	ldr	r0, [pc, #12]	; (23fec28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fec1a:	f7ff fd21 	bl	23fe660 <application_thread_invoke>
 23fec1e:	e7b7      	b.n	23feb90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fec20:	023feac1 	.word	0x023feac1
 23fec24:	023fed3d 	.word	0x023fed3d
 23fec28:	023fe965 	.word	0x023fe965

023fec2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fec2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fec30:	b08b      	sub	sp, #44	; 0x2c
 23fec32:	4605      	mov	r5, r0
 23fec34:	460f      	mov	r7, r1
 23fec36:	4690      	mov	r8, r2
 23fec38:	4699      	mov	r9, r3
 23fec3a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fec3e:	f7ff fd39 	bl	23fe6b4 <spark_cloud_flag_connected>
 23fec42:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fec44:	4683      	mov	fp, r0
 23fec46:	bb38      	cbnz	r0, 23fec98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fec48:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fec4c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fec4e:	a905      	add	r1, sp, #20
 23fec50:	4630      	mov	r0, r6
 23fec52:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fec56:	f7ff fecb 	bl	23fe9f0 <_ZN8particle5ErrorC1EOS0_>
 23fec5a:	2014      	movs	r0, #20
 23fec5c:	f7ff f931 	bl	23fdec2 <_Znwj>
 23fec60:	4604      	mov	r4, r0
 23fec62:	b148      	cbz	r0, 23fec78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fec64:	2302      	movs	r3, #2
 23fec66:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fec68:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fec6a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fec6e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fec70:	4631      	mov	r1, r6
 23fec72:	300c      	adds	r0, #12
 23fec74:	f7ff febc 	bl	23fe9f0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fec78:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fec7a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fec7c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fec80:	f7ff ff36 	bl	23feaf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fec84:	4630      	mov	r0, r6
 23fec86:	f7ff fec0 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fec8a:	a805      	add	r0, sp, #20
 23fec8c:	f7ff febd 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fec90:	4628      	mov	r0, r5
 23fec92:	b00b      	add	sp, #44	; 0x2c
 23fec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fec98:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fec9a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fec9c:	2014      	movs	r0, #20
 23fec9e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23feca2:	9307      	str	r3, [sp, #28]
 23feca4:	f7ff f90d 	bl	23fdec2 <_Znwj>
 23feca8:	4601      	mov	r1, r0
 23fecaa:	b118      	cbz	r0, 23fecb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fecac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fecb0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fecb2:	7044      	strb	r4, [r0, #1]
 23fecb4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fecb6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fecb8:	f7ff ff1a 	bl	23feaf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fecbc:	4b1e      	ldr	r3, [pc, #120]	; (23fed38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fecbe:	2008      	movs	r0, #8
 23fecc0:	9308      	str	r3, [sp, #32]
 23fecc2:	f7ff f8fe 	bl	23fdec2 <_Znwj>
 23fecc6:	4604      	mov	r4, r0
 23fecc8:	b110      	cbz	r0, 23fecd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fecca:	a903      	add	r1, sp, #12
 23feccc:	f7ff fecb 	bl	23fea66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fecd0:	464a      	mov	r2, r9
 23fecd2:	4641      	mov	r1, r8
 23fecd4:	4638      	mov	r0, r7
 23fecd6:	9600      	str	r6, [sp, #0]
 23fecd8:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fecdc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fecde:	f7ff fcf7 	bl	23fe6d0 <spark_send_event>
 23fece2:	b9b8      	cbnz	r0, 23fed14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fece4:	9b03      	ldr	r3, [sp, #12]
 23fece6:	3301      	adds	r3, #1
 23fece8:	781b      	ldrb	r3, [r3, #0]
 23fecea:	b2db      	uxtb	r3, r3
 23fecec:	b993      	cbnz	r3, 23fed14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fecee:	9305      	str	r3, [sp, #20]
 23fecf0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fecf4:	a905      	add	r1, sp, #20
 23fecf6:	a803      	add	r0, sp, #12
 23fecf8:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fecfc:	f7ff ff1c 	bl	23feb38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fed00:	a805      	add	r0, sp, #20
 23fed02:	f7ff fe82 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fed06:	a805      	add	r0, sp, #20
 23fed08:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fed0a:	f7ff feb5 	bl	23fea78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fed0e:	a806      	add	r0, sp, #24
 23fed10:	f7ff fe12 	bl	23fe938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fed14:	a903      	add	r1, sp, #12
 23fed16:	a805      	add	r0, sp, #20
 23fed18:	f7ff fea5 	bl	23fea66 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fed1c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fed1e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fed20:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fed22:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fed24:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fed26:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fed28:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fed2a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fed2c:	f7ff fe04 	bl	23fe938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fed30:	a804      	add	r0, sp, #16
 23fed32:	f7ff fe01 	bl	23fe938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fed36:	e7ab      	b.n	23fec90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fed38:	023fedb9 	.word	0x023fedb9

023fed3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fed3c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fed3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fed40:	4605      	mov	r5, r0
	switch (__op)
 23fed42:	d103      	bne.n	23fed4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fed44:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fed46:	6003      	str	r3, [r0, #0]
      }
 23fed48:	2000      	movs	r0, #0
 23fed4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fed4c:	2a02      	cmp	r2, #2
 23fed4e:	d010      	beq.n	23fed72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fed50:	2a03      	cmp	r2, #3
 23fed52:	d1f9      	bne.n	23fed48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fed54:	6804      	ldr	r4, [r0, #0]
 23fed56:	2c00      	cmp	r4, #0
 23fed58:	d0f6      	beq.n	23fed48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fed5a:	f104 0010 	add.w	r0, r4, #16
 23fed5e:	f7ff fe54 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fed62:	4620      	mov	r0, r4
 23fed64:	f7ff fe12 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fed68:	2118      	movs	r1, #24
 23fed6a:	4620      	mov	r0, r4
 23fed6c:	f7ff f8ad 	bl	23fdeca <_ZdlPvj>
 23fed70:	e7ea      	b.n	23fed48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fed72:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fed74:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fed76:	f7ff f8a4 	bl	23fdec2 <_Znwj>
 23fed7a:	4604      	mov	r4, r0
 23fed7c:	b150      	cbz	r0, 23fed94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fed7e:	4631      	mov	r1, r6
 23fed80:	f7ff feca 	bl	23feb18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fed84:	6930      	ldr	r0, [r6, #16]
 23fed86:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fed8a:	b108      	cbz	r0, 23fed90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fed8c:	f000 ff24 	bl	23ffbd8 <strdup>
        type_(type) {
 23fed90:	6120      	str	r0, [r4, #16]
 23fed92:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fed94:	602c      	str	r4, [r5, #0]
	}
 23fed96:	e7d7      	b.n	23fed48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fed98 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fed98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fed9a:	2300      	movs	r3, #0
 23fed9c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fed9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23feda0:	4604      	mov	r4, r0
 23feda2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23feda4:	b12b      	cbz	r3, 23fedb2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23feda6:	2202      	movs	r2, #2
 23feda8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fedaa:	68eb      	ldr	r3, [r5, #12]
 23fedac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fedae:	68ab      	ldr	r3, [r5, #8]
 23fedb0:	60a3      	str	r3, [r4, #8]
    }
 23fedb2:	4620      	mov	r0, r4
 23fedb4:	bd38      	pop	{r3, r4, r5, pc}
	...

023fedb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fedb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fedba:	4604      	mov	r4, r0
 23fedbc:	b089      	sub	sp, #36	; 0x24
 23fedbe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fedc0:	a801      	add	r0, sp, #4
 23fedc2:	4611      	mov	r1, r2
 23fedc4:	f7ff fe58 	bl	23fea78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fedc8:	b1a4      	cbz	r4, 23fedf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fedca:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fedcc:	b11d      	cbz	r5, 23fedd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fedce:	4628      	mov	r0, r5
 23fedd0:	f000 ff02 	bl	23ffbd8 <strdup>
 23fedd4:	4605      	mov	r5, r0
 23fedd6:	a801      	add	r0, sp, #4
 23fedd8:	a903      	add	r1, sp, #12
        type_(type) {
 23fedda:	9503      	str	r5, [sp, #12]
 23feddc:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fede0:	f7ff feaa 	bl	23feb38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fede4:	a803      	add	r0, sp, #12
 23fede6:	f7ff fe10 	bl	23fea0a <_ZN8particle5ErrorD1Ev>
 23fedea:	a802      	add	r0, sp, #8
 23fedec:	f7ff fda4 	bl	23fe938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fedf0:	b009      	add	sp, #36	; 0x24
 23fedf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fedf4:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fedf6:	9d01      	ldr	r5, [sp, #4]
 23fedf8:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fedfc:	2a00      	cmp	r2, #0
 23fedfe:	d103      	bne.n	23fee08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fee00:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fee04:	2900      	cmp	r1, #0
 23fee06:	d1f7      	bne.n	23fedf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fee08:	d1ef      	bne.n	23fedea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fee0a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fee0c:	2201      	movs	r2, #1
 23fee0e:	18eb      	adds	r3, r5, r3
 23fee10:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fee14:	1d2b      	adds	r3, r5, #4
 23fee16:	e8d3 6fef 	ldaex	r6, [r3]
 23fee1a:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fee1e:	2a00      	cmp	r2, #0
 23fee20:	d1f9      	bne.n	23fee16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fee22:	2e00      	cmp	r6, #0
 23fee24:	d0e1      	beq.n	23fedea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fee26:	4620      	mov	r0, r4
 23fee28:	f7ff fc0c 	bl	23fe644 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fee2c:	4607      	mov	r7, r0
 23fee2e:	b160      	cbz	r0, 23fee4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fee30:	4630      	mov	r0, r6
 23fee32:	f105 010c 	add.w	r1, r5, #12
 23fee36:	f7ff fe4a 	bl	23feace <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fee3a:	4630      	mov	r0, r6
 23fee3c:	f7ff fda6 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fee40:	2110      	movs	r1, #16
 23fee42:	4630      	mov	r0, r6
 23fee44:	f7ff f841 	bl	23fdeca <_ZdlPvj>
 23fee48:	e7cf      	b.n	23fedea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fee4a:	4631      	mov	r1, r6
 23fee4c:	a803      	add	r0, sp, #12
 23fee4e:	f7ff ffa3 	bl	23fed98 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fee52:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fee54:	2010      	movs	r0, #16
 23fee56:	f88d 301c 	strb.w	r3, [sp, #28]
 23fee5a:	f7ff f832 	bl	23fdec2 <_Znwj>
 23fee5e:	4605      	mov	r5, r0
 23fee60:	b1d0      	cbz	r0, 23fee98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fee62:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fee64:	2014      	movs	r0, #20
 23fee66:	f7ff f82c 	bl	23fdec2 <_Znwj>
 23fee6a:	4604      	mov	r4, r0
 23fee6c:	b178      	cbz	r0, 23fee8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fee6e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fee70:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fee72:	a803      	add	r0, sp, #12
 23fee74:	f7ff fd93 	bl	23fe99e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fee78:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fee7a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fee7c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fee7e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fee80:	9205      	str	r2, [sp, #20]
 23fee82:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fee84:	60e3      	str	r3, [r4, #12]
 23fee86:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fee8a:	9206      	str	r2, [sp, #24]
 23fee8c:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fee8e:	4b07      	ldr	r3, [pc, #28]	; (23feeac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fee90:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fee92:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fee94:	4b06      	ldr	r3, [pc, #24]	; (23feeb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fee96:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fee98:	a803      	add	r0, sp, #12
 23fee9a:	f7ff fd77 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fee9e:	2200      	movs	r2, #0
 23feea0:	4629      	mov	r1, r5
 23feea2:	4804      	ldr	r0, [pc, #16]	; (23feeb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23feea4:	f7ff fbdc 	bl	23fe660 <application_thread_invoke>
 23feea8:	e7c7      	b.n	23fee3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23feeaa:	bf00      	nop
 23feeac:	023feae1 	.word	0x023feae1
 23feeb0:	023feeb9 	.word	0x023feeb9
 23feeb4:	023fe965 	.word	0x023fe965

023feeb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23feeb8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23feeba:	b570      	push	{r4, r5, r6, lr}
 23feebc:	4604      	mov	r4, r0
	switch (__op)
 23feebe:	d103      	bne.n	23feec8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23feec0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23feec2:	6003      	str	r3, [r0, #0]
      }
 23feec4:	2000      	movs	r0, #0
 23feec6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23feec8:	2a02      	cmp	r2, #2
 23feeca:	d00c      	beq.n	23feee6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23feecc:	2a03      	cmp	r2, #3
 23feece:	d1f9      	bne.n	23feec4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23feed0:	6804      	ldr	r4, [r0, #0]
 23feed2:	2c00      	cmp	r4, #0
 23feed4:	d0f6      	beq.n	23feec4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23feed6:	4620      	mov	r0, r4
 23feed8:	f7ff fd58 	bl	23fe98c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23feedc:	2114      	movs	r1, #20
 23feede:	4620      	mov	r0, r4
 23feee0:	f7fe fff3 	bl	23fdeca <_ZdlPvj>
 23feee4:	e7ee      	b.n	23feec4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23feee6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23feee8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23feeea:	f7fe ffea 	bl	23fdec2 <_Znwj>
 23feeee:	4605      	mov	r5, r0
 23feef0:	b120      	cbz	r0, 23feefc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23feef2:	4631      	mov	r1, r6
 23feef4:	f7ff ff50 	bl	23fed98 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23feef8:	7c33      	ldrb	r3, [r6, #16]
 23feefa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23feefc:	6025      	str	r5, [r4, #0]
	}
 23feefe:	e7e1      	b.n	23feec4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fef00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fef00:	2200      	movs	r2, #0
 23fef02:	6840      	ldr	r0, [r0, #4]
 23fef04:	4611      	mov	r1, r2
 23fef06:	f7ff bc6f 	b.w	23fe7e8 <network_listening>

023fef0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fef0a:	2200      	movs	r2, #0
 23fef0c:	6840      	ldr	r0, [r0, #4]
 23fef0e:	4611      	mov	r1, r2
 23fef10:	f7ff bc86 	b.w	23fe820 <network_get_listen_timeout>

023fef14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fef14:	2200      	movs	r2, #0
 23fef16:	6840      	ldr	r0, [r0, #4]
 23fef18:	f7ff bc74 	b.w	23fe804 <network_set_listen_timeout>

023fef1c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fef1c:	2200      	movs	r2, #0
 23fef1e:	6840      	ldr	r0, [r0, #4]
 23fef20:	f081 0101 	eor.w	r1, r1, #1
 23fef24:	f7ff bc52 	b.w	23fe7cc <network_listen>

023fef28 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fef28:	2300      	movs	r3, #0
 23fef2a:	6840      	ldr	r0, [r0, #4]
 23fef2c:	461a      	mov	r2, r3
 23fef2e:	4619      	mov	r1, r3
 23fef30:	f7ff bc3e 	b.w	23fe7b0 <network_off>

023fef34 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fef34:	2300      	movs	r3, #0
 23fef36:	6840      	ldr	r0, [r0, #4]
 23fef38:	461a      	mov	r2, r3
 23fef3a:	4619      	mov	r1, r3
 23fef3c:	f7ff bc2a 	b.w	23fe794 <network_on>

023fef40 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fef40:	2200      	movs	r2, #0
 23fef42:	6840      	ldr	r0, [r0, #4]
 23fef44:	4611      	mov	r1, r2
 23fef46:	f7ff bc17 	b.w	23fe778 <network_ready>

023fef4a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fef4a:	2200      	movs	r2, #0
 23fef4c:	6840      	ldr	r0, [r0, #4]
 23fef4e:	4611      	mov	r1, r2
 23fef50:	f7ff bbf6 	b.w	23fe740 <network_connecting>

023fef54 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fef54:	2200      	movs	r2, #0
 23fef56:	2102      	movs	r1, #2
 23fef58:	6840      	ldr	r0, [r0, #4]
 23fef5a:	f7ff bbff 	b.w	23fe75c <network_disconnect>

023fef5e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fef5e:	2300      	movs	r3, #0
 23fef60:	6840      	ldr	r0, [r0, #4]
 23fef62:	461a      	mov	r2, r3
 23fef64:	f7ff bbde 	b.w	23fe724 <network_connect>

023fef68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fef68:	2203      	movs	r2, #3
 23fef6a:	4b02      	ldr	r3, [pc, #8]	; (23fef74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fef6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fef6e:	4a02      	ldr	r2, [pc, #8]	; (23fef78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fef70:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fef72:	4770      	bx	lr
 23fef74:	1007ae84 	.word	0x1007ae84
 23fef78:	023ffdf0 	.word	0x023ffdf0

023fef7c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fef7c:	4770      	bx	lr

023fef7e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fef7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fef80:	4606      	mov	r6, r0
 23fef82:	4615      	mov	r5, r2
 23fef84:	460c      	mov	r4, r1
 23fef86:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fef88:	42bc      	cmp	r4, r7
 23fef8a:	d006      	beq.n	23fef9a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fef8c:	6833      	ldr	r3, [r6, #0]
 23fef8e:	4630      	mov	r0, r6
 23fef90:	689b      	ldr	r3, [r3, #8]
 23fef92:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fef96:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fef98:	e7f6      	b.n	23fef88 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fef9a:	4628      	mov	r0, r5
 23fef9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fef9e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fef9e:	2200      	movs	r2, #0
 23fefa0:	7c00      	ldrb	r0, [r0, #16]
 23fefa2:	f7ff b9ab 	b.w	23fe2fc <hal_i2c_write>

023fefa6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fefa6:	2100      	movs	r1, #0
 23fefa8:	7c00      	ldrb	r0, [r0, #16]
 23fefaa:	f7ff b9b5 	b.w	23fe318 <hal_i2c_available>

023fefae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fefae:	2100      	movs	r1, #0
 23fefb0:	7c00      	ldrb	r0, [r0, #16]
 23fefb2:	f7ff b9bf 	b.w	23fe334 <hal_i2c_read>

023fefb6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fefb6:	2100      	movs	r1, #0
 23fefb8:	7c00      	ldrb	r0, [r0, #16]
 23fefba:	f7ff b9c9 	b.w	23fe350 <hal_i2c_peek>

023fefbe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fefbe:	2100      	movs	r1, #0
 23fefc0:	7c00      	ldrb	r0, [r0, #16]
 23fefc2:	f7ff b9d3 	b.w	23fe36c <hal_i2c_flush>

023fefc6 <_ZN7TwoWireD0Ev>:
 23fefc6:	b510      	push	{r4, lr}
 23fefc8:	4604      	mov	r4, r0
 23fefca:	2114      	movs	r1, #20
 23fefcc:	f7fe ff7d 	bl	23fdeca <_ZdlPvj>
 23fefd0:	4620      	mov	r0, r4
 23fefd2:	bd10      	pop	{r4, pc}

023fefd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fefd4:	b538      	push	{r3, r4, r5, lr}
 23fefd6:	4604      	mov	r4, r0
 23fefd8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fefda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fefde:	2200      	movs	r2, #0
 23fefe0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fefe4:	4b09      	ldr	r3, [pc, #36]	; (23ff00c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fefe6:	4608      	mov	r0, r1
  _i2c = i2c;
 23fefe8:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fefea:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fefec:	4629      	mov	r1, r5
 23fefee:	f7ff f9d9 	bl	23fe3a4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23feff2:	30bf      	adds	r0, #191	; 0xbf
 23feff4:	d108      	bne.n	23ff008 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23feff6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23feff8:	07db      	lsls	r3, r3, #31
 23feffa:	d505      	bpl.n	23ff008 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23feffc:	6868      	ldr	r0, [r5, #4]
 23feffe:	f7ff fc47 	bl	23fe890 <free>
    free(conf.tx_buffer);
 23ff002:	68e8      	ldr	r0, [r5, #12]
 23ff004:	f7ff fc44 	bl	23fe890 <free>
}
 23ff008:	4620      	mov	r0, r4
 23ff00a:	bd38      	pop	{r3, r4, r5, pc}
 23ff00c:	023ffe2c 	.word	0x023ffe2c

023ff010 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23ff010:	2300      	movs	r3, #0
 23ff012:	7c00      	ldrb	r0, [r0, #16]
 23ff014:	461a      	mov	r2, r3
 23ff016:	4619      	mov	r1, r3
 23ff018:	f7ff b946 	b.w	23fe2a8 <hal_i2c_begin>

023ff01c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23ff01c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23ff01e:	2200      	movs	r2, #0
 23ff020:	2314      	movs	r3, #20
 23ff022:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23ff026:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23ff02a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23ff02c:	7c00      	ldrb	r0, [r0, #16]
 23ff02e:	f88d 3008 	strb.w	r3, [sp, #8]
 23ff032:	684b      	ldr	r3, [r1, #4]
 23ff034:	9303      	str	r3, [sp, #12]
 23ff036:	68cb      	ldr	r3, [r1, #12]
 23ff038:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23ff03a:	7a0b      	ldrb	r3, [r1, #8]
 23ff03c:	a901      	add	r1, sp, #4
 23ff03e:	9305      	str	r3, [sp, #20]
 23ff040:	f7ff f9be 	bl	23fe3c0 <hal_i2c_request_ex>
}
 23ff044:	b007      	add	sp, #28
 23ff046:	f85d fb04 	ldr.w	pc, [sp], #4

023ff04a <_ZN7TwoWire11requestFromEhjh>:
{
 23ff04a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23ff04c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23ff04e:	f88d 1000 	strb.w	r1, [sp]
 23ff052:	f04f 0164 	mov.w	r1, #100	; 0x64
 23ff056:	bf18      	it	ne
 23ff058:	2301      	movne	r3, #1
 23ff05a:	9103      	str	r1, [sp, #12]
 23ff05c:	4669      	mov	r1, sp
    size_ = size;
 23ff05e:	9201      	str	r2, [sp, #4]
 23ff060:	f88d 3008 	strb.w	r3, [sp, #8]
 23ff064:	f7ff ffda 	bl	23ff01c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23ff068:	b005      	add	sp, #20
 23ff06a:	f85d fb04 	ldr.w	pc, [sp], #4

023ff06e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23ff06e:	2301      	movs	r3, #1
 23ff070:	f7ff bfeb 	b.w	23ff04a <_ZN7TwoWire11requestFromEhjh>

023ff074 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23ff074:	2200      	movs	r2, #0
 23ff076:	7c00      	ldrb	r0, [r0, #16]
 23ff078:	f7ff b924 	b.w	23fe2c4 <hal_i2c_begin_transmission>

023ff07c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23ff07c:	b2c9      	uxtb	r1, r1
 23ff07e:	f7ff bff9 	b.w	23ff074 <_ZN7TwoWire17beginTransmissionEh>

023ff082 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23ff082:	2200      	movs	r2, #0
 23ff084:	7c00      	ldrb	r0, [r0, #16]
 23ff086:	f7ff b92b 	b.w	23fe2e0 <hal_i2c_end_transmission>

023ff08a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23ff08a:	2101      	movs	r1, #1
 23ff08c:	f7ff bff9 	b.w	23ff082 <_ZN7TwoWire15endTransmissionEh>

023ff090 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff090:	4770      	bx	lr

023ff092 <_ZN9IPAddressD0Ev>:
 23ff092:	b510      	push	{r4, lr}
 23ff094:	4604      	mov	r4, r0
 23ff096:	2118      	movs	r1, #24
 23ff098:	f7fe ff17 	bl	23fdeca <_ZdlPvj>
 23ff09c:	4620      	mov	r0, r4
 23ff09e:	bd10      	pop	{r4, pc}

023ff0a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff0a2:	7d03      	ldrb	r3, [r0, #20]
{
 23ff0a4:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff0a6:	2b06      	cmp	r3, #6
 23ff0a8:	f04f 0400 	mov.w	r4, #0
{
 23ff0ac:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff0ae:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff0b2:	d012      	beq.n	23ff0da <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff0b4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff0b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff0bc:	220a      	movs	r2, #10
 23ff0be:	4630      	mov	r0, r6
 23ff0c0:	f000 f943 	bl	23ff34a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff0c4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff0c6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff0c8:	d019      	beq.n	23ff0fe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff0ca:	2c00      	cmp	r4, #0
 23ff0cc:	d0f4      	beq.n	23ff0b8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff0ce:	212e      	movs	r1, #46	; 0x2e
 23ff0d0:	4630      	mov	r0, r6
 23ff0d2:	f000 f937 	bl	23ff344 <_ZN5Print5printEc>
 23ff0d6:	4404      	add	r4, r0
 23ff0d8:	e7ee      	b.n	23ff0b8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff0da:	232f      	movs	r3, #47	; 0x2f
 23ff0dc:	466a      	mov	r2, sp
 23ff0de:	4639      	mov	r1, r7
 23ff0e0:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff0e2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff0e6:	f7ff f979 	bl	23fe3dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff0ea:	4668      	mov	r0, sp
 23ff0ec:	f7fe fec4 	bl	23fde78 <strlen>
 23ff0f0:	6833      	ldr	r3, [r6, #0]
 23ff0f2:	4602      	mov	r2, r0
 23ff0f4:	4669      	mov	r1, sp
 23ff0f6:	4630      	mov	r0, r6
 23ff0f8:	68db      	ldr	r3, [r3, #12]
 23ff0fa:	4798      	blx	r3
 23ff0fc:	4604      	mov	r4, r0
    }
    return n;
}
 23ff0fe:	4620      	mov	r0, r4
 23ff100:	b00d      	add	sp, #52	; 0x34
 23ff102:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff104 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff104:	b510      	push	{r4, lr}
 23ff106:	4604      	mov	r4, r0
 23ff108:	4b04      	ldr	r3, [pc, #16]	; (23ff11c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff10a:	2211      	movs	r2, #17
 23ff10c:	2100      	movs	r1, #0
 23ff10e:	f840 3b04 	str.w	r3, [r0], #4
 23ff112:	f000 fd23 	bl	23ffb5c <memset>
}
 23ff116:	4620      	mov	r0, r4
 23ff118:	bd10      	pop	{r4, pc}
 23ff11a:	bf00      	nop
 23ff11c:	023ffe54 	.word	0x023ffe54

023ff120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff120:	4603      	mov	r3, r0
 23ff122:	4a07      	ldr	r2, [pc, #28]	; (23ff140 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff124:	b510      	push	{r4, lr}
 23ff126:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff12a:	f101 0210 	add.w	r2, r1, #16
 23ff12e:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff132:	4291      	cmp	r1, r2
 23ff134:	f843 4b04 	str.w	r4, [r3], #4
 23ff138:	d1f9      	bne.n	23ff12e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff13a:	780a      	ldrb	r2, [r1, #0]
 23ff13c:	701a      	strb	r2, [r3, #0]
}
 23ff13e:	bd10      	pop	{r4, pc}
 23ff140:	023ffe54 	.word	0x023ffe54

023ff144 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff144:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff146:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff14a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff14e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff152:	2304      	movs	r3, #4
 23ff154:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff158:	6041      	str	r1, [r0, #4]
 23ff15a:	7503      	strb	r3, [r0, #20]
}
 23ff15c:	bd10      	pop	{r4, pc}
	...

023ff160 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff160:	b507      	push	{r0, r1, r2, lr}
 23ff162:	4b06      	ldr	r3, [pc, #24]	; (23ff17c <_ZN9IPAddressC1EPKh+0x1c>)
 23ff164:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff166:	78cb      	ldrb	r3, [r1, #3]
 23ff168:	9300      	str	r3, [sp, #0]
 23ff16a:	788b      	ldrb	r3, [r1, #2]
 23ff16c:	784a      	ldrb	r2, [r1, #1]
 23ff16e:	7809      	ldrb	r1, [r1, #0]
 23ff170:	f7ff ffe8 	bl	23ff144 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff174:	b003      	add	sp, #12
 23ff176:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff17a:	bf00      	nop
 23ff17c:	023ffe54 	.word	0x023ffe54

023ff180 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff180:	4b01      	ldr	r3, [pc, #4]	; (23ff188 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff182:	4a02      	ldr	r2, [pc, #8]	; (23ff18c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff184:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff186:	4770      	bx	lr
 23ff188:	1007ae8c 	.word	0x1007ae8c
 23ff18c:	023ffe60 	.word	0x023ffe60

023ff190 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff190:	2300      	movs	r3, #0
 23ff192:	6840      	ldr	r0, [r0, #4]
 23ff194:	461a      	mov	r2, r3
 23ff196:	f7ff bac5 	b.w	23fe724 <network_connect>

023ff19a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff19a:	2200      	movs	r2, #0
 23ff19c:	2102      	movs	r1, #2
 23ff19e:	6840      	ldr	r0, [r0, #4]
 23ff1a0:	f7ff badc 	b.w	23fe75c <network_disconnect>

023ff1a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff1a4:	2200      	movs	r2, #0
 23ff1a6:	6840      	ldr	r0, [r0, #4]
 23ff1a8:	4611      	mov	r1, r2
 23ff1aa:	f7ff bac9 	b.w	23fe740 <network_connecting>

023ff1ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff1ae:	2200      	movs	r2, #0
 23ff1b0:	6840      	ldr	r0, [r0, #4]
 23ff1b2:	4611      	mov	r1, r2
 23ff1b4:	f7ff bae0 	b.w	23fe778 <network_ready>

023ff1b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff1b8:	2300      	movs	r3, #0
 23ff1ba:	6840      	ldr	r0, [r0, #4]
 23ff1bc:	461a      	mov	r2, r3
 23ff1be:	4619      	mov	r1, r3
 23ff1c0:	f7ff bae8 	b.w	23fe794 <network_on>

023ff1c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff1c4:	2300      	movs	r3, #0
 23ff1c6:	6840      	ldr	r0, [r0, #4]
 23ff1c8:	461a      	mov	r2, r3
 23ff1ca:	4619      	mov	r1, r3
 23ff1cc:	f7ff baf0 	b.w	23fe7b0 <network_off>

023ff1d0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff1d0:	2100      	movs	r1, #0
 23ff1d2:	6840      	ldr	r0, [r0, #4]
 23ff1d4:	f7ff bb32 	b.w	23fe83c <network_is_on>

023ff1d8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff1d8:	2100      	movs	r1, #0
 23ff1da:	6840      	ldr	r0, [r0, #4]
 23ff1dc:	f7ff bb3c 	b.w	23fe858 <network_is_off>

023ff1e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff1e0:	2200      	movs	r2, #0
 23ff1e2:	6840      	ldr	r0, [r0, #4]
 23ff1e4:	f081 0101 	eor.w	r1, r1, #1
 23ff1e8:	f7ff baf0 	b.w	23fe7cc <network_listen>

023ff1ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff1ec:	2200      	movs	r2, #0
 23ff1ee:	6840      	ldr	r0, [r0, #4]
 23ff1f0:	f7ff bb08 	b.w	23fe804 <network_set_listen_timeout>

023ff1f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff1f4:	2200      	movs	r2, #0
 23ff1f6:	6840      	ldr	r0, [r0, #4]
 23ff1f8:	4611      	mov	r1, r2
 23ff1fa:	f7ff bb11 	b.w	23fe820 <network_get_listen_timeout>

023ff1fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff1fe:	2200      	movs	r2, #0
 23ff200:	6840      	ldr	r0, [r0, #4]
 23ff202:	4611      	mov	r1, r2
 23ff204:	f7ff baf0 	b.w	23fe7e8 <network_listening>

023ff208 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff20c:	b095      	sub	sp, #84	; 0x54
 23ff20e:	4614      	mov	r4, r2
 23ff210:	460d      	mov	r5, r1
 23ff212:	4607      	mov	r7, r0
    IPAddress addr;
 23ff214:	f7ff ff76 	bl	23ff104 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff218:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff21a:	221c      	movs	r2, #28
 23ff21c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff21e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff220:	f000 fc9c 	bl	23ffb5c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff224:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff226:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff228:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff22a:	2100      	movs	r1, #0
 23ff22c:	466b      	mov	r3, sp
 23ff22e:	aa0c      	add	r2, sp, #48	; 0x30
 23ff230:	f7ff f8f0 	bl	23fe414 <netdb_getaddrinfo>
    if (!r) {
 23ff234:	4604      	mov	r4, r0
 23ff236:	2800      	cmp	r0, #0
 23ff238:	d14b      	bne.n	23ff2d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff23a:	4602      	mov	r2, r0
 23ff23c:	2101      	movs	r1, #1
 23ff23e:	6868      	ldr	r0, [r5, #4]
 23ff240:	f7ff fa9a 	bl	23fe778 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff244:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff246:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff248:	4622      	mov	r2, r4
 23ff24a:	6868      	ldr	r0, [r5, #4]
 23ff24c:	f7ff fa94 	bl	23fe778 <network_ready>
        bool ok = false;
 23ff250:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff252:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff254:	9e00      	ldr	r6, [sp, #0]
 23ff256:	2e00      	cmp	r6, #0
 23ff258:	d03b      	beq.n	23ff2d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff25a:	2900      	cmp	r1, #0
 23ff25c:	d139      	bne.n	23ff2d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff25e:	6873      	ldr	r3, [r6, #4]
 23ff260:	2b02      	cmp	r3, #2
 23ff262:	d003      	beq.n	23ff26c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff264:	2b0a      	cmp	r3, #10
 23ff266:	d011      	beq.n	23ff28c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff268:	69f6      	ldr	r6, [r6, #28]
 23ff26a:	e7f4      	b.n	23ff256 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff26c:	f1b8 0f00 	cmp.w	r8, #0
 23ff270:	d0fa      	beq.n	23ff268 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff272:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff274:	a806      	add	r0, sp, #24
 23ff276:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff278:	1d3c      	adds	r4, r7, #4
 23ff27a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff27c:	f7ff ff70 	bl	23ff160 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff284:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff286:	4641      	mov	r1, r8
 23ff288:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff28a:	e7ed      	b.n	23ff268 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff28c:	f1b9 0f00 	cmp.w	r9, #0
 23ff290:	d0ea      	beq.n	23ff268 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff292:	2210      	movs	r2, #16
 23ff294:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff296:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff298:	f000 fc60 	bl	23ffb5c <memset>
                    a.v = 6;
 23ff29c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff29e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff2a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff2a4:	f104 0308 	add.w	r3, r4, #8
 23ff2a8:	3418      	adds	r4, #24
 23ff2aa:	462a      	mov	r2, r5
 23ff2ac:	6818      	ldr	r0, [r3, #0]
 23ff2ae:	6859      	ldr	r1, [r3, #4]
 23ff2b0:	3308      	adds	r3, #8
 23ff2b2:	c203      	stmia	r2!, {r0, r1}
 23ff2b4:	42a3      	cmp	r3, r4
 23ff2b6:	4615      	mov	r5, r2
 23ff2b8:	d1f7      	bne.n	23ff2aa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff2ba:	a901      	add	r1, sp, #4
 23ff2bc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff2be:	1d3c      	adds	r4, r7, #4
 23ff2c0:	ad07      	add	r5, sp, #28
 23ff2c2:	f7ff ff2d 	bl	23ff120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff2ca:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff2cc:	4649      	mov	r1, r9
 23ff2ce:	7023      	strb	r3, [r4, #0]
                    break;
 23ff2d0:	e7ca      	b.n	23ff268 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff2d2:	9800      	ldr	r0, [sp, #0]
 23ff2d4:	f7ff f890 	bl	23fe3f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff2d8:	4638      	mov	r0, r7
 23ff2da:	b015      	add	sp, #84	; 0x54
 23ff2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff2e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff2e0:	4b02      	ldr	r3, [pc, #8]	; (23ff2ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff2e2:	4a03      	ldr	r2, [pc, #12]	; (23ff2f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff2e4:	601a      	str	r2, [r3, #0]
 23ff2e6:	2200      	movs	r2, #0
 23ff2e8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff2ea:	4770      	bx	lr
 23ff2ec:	1007ae90 	.word	0x1007ae90
 23ff2f0:	023ffe6c 	.word	0x023ffe6c

023ff2f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff2f6:	4606      	mov	r6, r0
 23ff2f8:	460d      	mov	r5, r1
  size_t n = 0;
 23ff2fa:	2400      	movs	r4, #0
 23ff2fc:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff2fe:	42bd      	cmp	r5, r7
 23ff300:	d00c      	beq.n	23ff31c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff302:	6833      	ldr	r3, [r6, #0]
 23ff304:	4630      	mov	r0, r6
 23ff306:	689b      	ldr	r3, [r3, #8]
 23ff308:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff30c:	4798      	blx	r3
     if (chunk>=0)
 23ff30e:	1e03      	subs	r3, r0, #0
 23ff310:	db01      	blt.n	23ff316 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff312:	441c      	add	r4, r3
  while (size--) {
 23ff314:	e7f3      	b.n	23ff2fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff316:	2c00      	cmp	r4, #0
 23ff318:	bf08      	it	eq
 23ff31a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff31c:	4620      	mov	r0, r4
 23ff31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff320 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff320:	b513      	push	{r0, r1, r4, lr}
 23ff322:	4604      	mov	r4, r0
    }
 23ff324:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff326:	b159      	cbz	r1, 23ff340 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff328:	9101      	str	r1, [sp, #4]
 23ff32a:	f7fe fda5 	bl	23fde78 <strlen>
 23ff32e:	4602      	mov	r2, r0
 23ff330:	4620      	mov	r0, r4
 23ff332:	6823      	ldr	r3, [r4, #0]
 23ff334:	9901      	ldr	r1, [sp, #4]
 23ff336:	68db      	ldr	r3, [r3, #12]
    }
 23ff338:	b002      	add	sp, #8
 23ff33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff33e:	4718      	bx	r3
    }
 23ff340:	b002      	add	sp, #8
 23ff342:	bd10      	pop	{r4, pc}

023ff344 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23ff344:	6803      	ldr	r3, [r0, #0]
 23ff346:	689b      	ldr	r3, [r3, #8]
 23ff348:	4718      	bx	r3

023ff34a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff34a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff34c:	2a01      	cmp	r2, #1
 23ff34e:	bf98      	it	ls
 23ff350:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff352:	b530      	push	{r4, r5, lr}
 23ff354:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff356:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff35a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff35c:	460d      	mov	r5, r1
 23ff35e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff362:	fb01 5312 	mls	r3, r1, r2, r5
 23ff366:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff36a:	2b09      	cmp	r3, #9
 23ff36c:	bf94      	ite	ls
 23ff36e:	3330      	addls	r3, #48	; 0x30
 23ff370:	3337      	addhi	r3, #55	; 0x37
 23ff372:	b2db      	uxtb	r3, r3
  } while(n);
 23ff374:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff376:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff37a:	d9ef      	bls.n	23ff35c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff37c:	4621      	mov	r1, r4
 23ff37e:	f7ff ffcf 	bl	23ff320 <_ZN5Print5writeEPKc>
}
 23ff382:	b00b      	add	sp, #44	; 0x2c
 23ff384:	bd30      	pop	{r4, r5, pc}
	...

023ff388 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23ff388:	2200      	movs	r2, #0
 23ff38a:	4b01      	ldr	r3, [pc, #4]	; (23ff390 <_GLOBAL__sub_I_RGB+0x8>)
 23ff38c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff38e:	4770      	bx	lr
 23ff390:	1007ae98 	.word	0x1007ae98

023ff394 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff394:	b510      	push	{r4, lr}
 23ff396:	4604      	mov	r4, r0
 23ff398:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff39a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff39c:	f7ff f848 	bl	23fe430 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff3a0:	2300      	movs	r3, #0
}
 23ff3a2:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff3a4:	6063      	str	r3, [r4, #4]
}
 23ff3a6:	bd10      	pop	{r4, pc}

023ff3a8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff3a8:	b510      	push	{r4, lr}
 23ff3aa:	4604      	mov	r4, r0
{
	free(buffer);
 23ff3ac:	6800      	ldr	r0, [r0, #0]
 23ff3ae:	f7ff fa6f 	bl	23fe890 <free>
}
 23ff3b2:	4620      	mov	r0, r4
 23ff3b4:	bd10      	pop	{r4, pc}

023ff3b6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff3b6:	b510      	push	{r4, lr}
 23ff3b8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff3ba:	6800      	ldr	r0, [r0, #0]
 23ff3bc:	b108      	cbz	r0, 23ff3c2 <_ZN6String10invalidateEv+0xc>
 23ff3be:	f7ff fa67 	bl	23fe890 <free>
	buffer = NULL;
 23ff3c2:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff3c4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff3c8:	6023      	str	r3, [r4, #0]
}
 23ff3ca:	bd10      	pop	{r4, pc}

023ff3cc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff3cc:	b538      	push	{r3, r4, r5, lr}
 23ff3ce:	4604      	mov	r4, r0
 23ff3d0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff3d2:	6800      	ldr	r0, [r0, #0]
 23ff3d4:	3101      	adds	r1, #1
 23ff3d6:	f7ff fa69 	bl	23fe8ac <realloc>
	if (newbuffer) {
 23ff3da:	b110      	cbz	r0, 23ff3e2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff3dc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff3e0:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff3e2:	bd38      	pop	{r3, r4, r5, pc}

023ff3e4 <_ZN6String7reserveEj>:
{
 23ff3e4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff3e6:	6803      	ldr	r3, [r0, #0]
{
 23ff3e8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff3ea:	b123      	cbz	r3, 23ff3f6 <_ZN6String7reserveEj+0x12>
 23ff3ec:	6843      	ldr	r3, [r0, #4]
 23ff3ee:	428b      	cmp	r3, r1
 23ff3f0:	d301      	bcc.n	23ff3f6 <_ZN6String7reserveEj+0x12>
 23ff3f2:	2001      	movs	r0, #1
}
 23ff3f4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff3f6:	4620      	mov	r0, r4
 23ff3f8:	f7ff ffe8 	bl	23ff3cc <_ZN6String12changeBufferEj>
 23ff3fc:	2800      	cmp	r0, #0
 23ff3fe:	d0f9      	beq.n	23ff3f4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff400:	68a3      	ldr	r3, [r4, #8]
 23ff402:	2b00      	cmp	r3, #0
 23ff404:	d1f5      	bne.n	23ff3f2 <_ZN6String7reserveEj+0xe>
 23ff406:	6822      	ldr	r2, [r4, #0]
 23ff408:	7013      	strb	r3, [r2, #0]
 23ff40a:	e7f2      	b.n	23ff3f2 <_ZN6String7reserveEj+0xe>

023ff40c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff40e:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff410:	4611      	mov	r1, r2
 23ff412:	9201      	str	r2, [sp, #4]
{
 23ff414:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff416:	f7ff ffe5 	bl	23ff3e4 <_ZN6String7reserveEj>
 23ff41a:	9a01      	ldr	r2, [sp, #4]
 23ff41c:	b928      	cbnz	r0, 23ff42a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff41e:	4620      	mov	r0, r4
 23ff420:	f7ff ffc9 	bl	23ff3b6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff424:	4620      	mov	r0, r4
 23ff426:	b003      	add	sp, #12
 23ff428:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff42a:	4629      	mov	r1, r5
	len = length;
 23ff42c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff42e:	6820      	ldr	r0, [r4, #0]
 23ff430:	f000 fb87 	bl	23ffb42 <memcpy>
	buffer[len] = 0;
 23ff434:	2100      	movs	r1, #0
 23ff436:	6822      	ldr	r2, [r4, #0]
 23ff438:	68a3      	ldr	r3, [r4, #8]
 23ff43a:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff43c:	e7f2      	b.n	23ff424 <_ZN6String4copyEPKcj+0x18>

023ff43e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff43e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff440:	b513      	push	{r0, r1, r4, lr}
 23ff442:	4604      	mov	r4, r0
	capacity = 0;
 23ff444:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff448:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff44a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff44c:	b141      	cbz	r1, 23ff460 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff44e:	4608      	mov	r0, r1
 23ff450:	9101      	str	r1, [sp, #4]
 23ff452:	f7fe fd11 	bl	23fde78 <strlen>
 23ff456:	9901      	ldr	r1, [sp, #4]
 23ff458:	4602      	mov	r2, r0
 23ff45a:	4620      	mov	r0, r4
 23ff45c:	f7ff ffd6 	bl	23ff40c <_ZN6String4copyEPKcj>
}
 23ff460:	4620      	mov	r0, r4
 23ff462:	b002      	add	sp, #8
 23ff464:	bd10      	pop	{r4, pc}

023ff466 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff466:	4288      	cmp	r0, r1
{
 23ff468:	b510      	push	{r4, lr}
 23ff46a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff46c:	d005      	beq.n	23ff47a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff46e:	680b      	ldr	r3, [r1, #0]
 23ff470:	b12b      	cbz	r3, 23ff47e <_ZN6StringaSERKS_+0x18>
 23ff472:	688a      	ldr	r2, [r1, #8]
 23ff474:	4619      	mov	r1, r3
 23ff476:	f7ff ffc9 	bl	23ff40c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff47a:	4620      	mov	r0, r4
 23ff47c:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff47e:	f7ff ff9a 	bl	23ff3b6 <_ZN6String10invalidateEv>
 23ff482:	e7fa      	b.n	23ff47a <_ZN6StringaSERKS_+0x14>

023ff484 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff484:	2300      	movs	r3, #0
String::String(const String &value)
 23ff486:	b510      	push	{r4, lr}
 23ff488:	4604      	mov	r4, r0
	capacity = 0;
 23ff48a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff48e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff490:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff492:	f7ff ffe8 	bl	23ff466 <_ZN6StringaSERKS_>
}
 23ff496:	4620      	mov	r0, r4
 23ff498:	bd10      	pop	{r4, pc}

023ff49a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23ff49a:	b570      	push	{r4, r5, r6, lr}
 23ff49c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23ff49e:	460e      	mov	r6, r1
 23ff4a0:	b909      	cbnz	r1, 23ff4a6 <_ZN6String6concatEPKcj+0xc>
 23ff4a2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23ff4a4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23ff4a6:	b16a      	cbz	r2, 23ff4c4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23ff4a8:	6884      	ldr	r4, [r0, #8]
 23ff4aa:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23ff4ac:	4621      	mov	r1, r4
 23ff4ae:	f7ff ff99 	bl	23ff3e4 <_ZN6String7reserveEj>
 23ff4b2:	2800      	cmp	r0, #0
 23ff4b4:	d0f5      	beq.n	23ff4a2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23ff4b6:	6828      	ldr	r0, [r5, #0]
 23ff4b8:	68ab      	ldr	r3, [r5, #8]
 23ff4ba:	4631      	mov	r1, r6
 23ff4bc:	4418      	add	r0, r3
 23ff4be:	f000 fb83 	bl	23ffbc8 <strcpy>
	len = newlen;
 23ff4c2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23ff4c4:	2001      	movs	r0, #1
 23ff4c6:	e7ed      	b.n	23ff4a4 <_ZN6String6concatEPKcj+0xa>

023ff4c8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23ff4c8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff4ca:	688a      	ldr	r2, [r1, #8]
 23ff4cc:	6809      	ldr	r1, [r1, #0]
{
 23ff4ce:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff4d0:	f7ff ffe3 	bl	23ff49a <_ZN6String6concatEPKcj>
 23ff4d4:	b910      	cbnz	r0, 23ff4dc <_ZplRK15StringSumHelperRK6String+0x14>
 23ff4d6:	4620      	mov	r0, r4
 23ff4d8:	f7ff ff6d 	bl	23ff3b6 <_ZN6String10invalidateEv>
	return a;
}
 23ff4dc:	4620      	mov	r0, r4
 23ff4de:	bd10      	pop	{r4, pc}

023ff4e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff4e0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff4e2:	2000      	movs	r0, #0
 23ff4e4:	4b04      	ldr	r3, [pc, #16]	; (23ff4f8 <_GLOBAL__sub_I_System+0x18>)
 23ff4e6:	601a      	str	r2, [r3, #0]
 23ff4e8:	4b04      	ldr	r3, [pc, #16]	; (23ff4fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff4ea:	4a05      	ldr	r2, [pc, #20]	; (23ff500 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff4ec:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff4f0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff4f2:	f7ff b88b 	b.w	23fe60c <set_system_mode>
 23ff4f6:	bf00      	nop
 23ff4f8:	1007aeb4 	.word	0x1007aeb4
 23ff4fc:	1007aea8 	.word	0x1007aea8
 23ff500:	ffff0000 	.word	0xffff0000

023ff504 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff504:	4b02      	ldr	r3, [pc, #8]	; (23ff510 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff506:	681a      	ldr	r2, [r3, #0]
 23ff508:	4b02      	ldr	r3, [pc, #8]	; (23ff514 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff50a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff50c:	4770      	bx	lr
 23ff50e:	bf00      	nop
 23ff510:	1007ad9c 	.word	0x1007ad9c
 23ff514:	1007aeb8 	.word	0x1007aeb8

023ff518 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff518:	4770      	bx	lr

023ff51a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff51a:	7441      	strb	r1, [r0, #17]
}
 23ff51c:	4770      	bx	lr

023ff51e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff51e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff520:	7c00      	ldrb	r0, [r0, #16]
 23ff522:	f7fe fff5 	bl	23fe510 <hal_usart_available_data_for_write>
}
 23ff526:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff52a:	bd08      	pop	{r3, pc}

023ff52c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff52c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff52e:	7c00      	ldrb	r0, [r0, #16]
 23ff530:	f7fe ffa8 	bl	23fe484 <hal_usart_available>
}
 23ff534:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff538:	bd08      	pop	{r3, pc}

023ff53a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff53a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff53c:	7c00      	ldrb	r0, [r0, #16]
 23ff53e:	f7fe ffbd 	bl	23fe4bc <hal_usart_peek>
}
 23ff542:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff546:	bd08      	pop	{r3, pc}

023ff548 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff548:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff54a:	7c00      	ldrb	r0, [r0, #16]
 23ff54c:	f7fe ffa8 	bl	23fe4a0 <hal_usart_read>
}
 23ff550:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff554:	bd08      	pop	{r3, pc}

023ff556 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff556:	7c00      	ldrb	r0, [r0, #16]
 23ff558:	f7fe bfbe 	b.w	23fe4d8 <hal_usart_flush>

023ff55c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff55e:	7c45      	ldrb	r5, [r0, #17]
{
 23ff560:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff562:	b12d      	cbz	r5, 23ff570 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff564:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff566:	b003      	add	sp, #12
 23ff568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff56c:	f7fe bf7c 	b.w	23fe468 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff570:	7c00      	ldrb	r0, [r0, #16]
 23ff572:	9101      	str	r1, [sp, #4]
 23ff574:	f7fe ffcc 	bl	23fe510 <hal_usart_available_data_for_write>
 23ff578:	2800      	cmp	r0, #0
 23ff57a:	9901      	ldr	r1, [sp, #4]
 23ff57c:	dcf2      	bgt.n	23ff564 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff57e:	4628      	mov	r0, r5
 23ff580:	b003      	add	sp, #12
 23ff582:	bd30      	pop	{r4, r5, pc}

023ff584 <_ZN11USARTSerialD0Ev>:
 23ff584:	b510      	push	{r4, lr}
 23ff586:	4604      	mov	r4, r0
 23ff588:	2114      	movs	r1, #20
 23ff58a:	f7fe fc9e 	bl	23fdeca <_ZdlPvj>
 23ff58e:	4620      	mov	r0, r4
 23ff590:	bd10      	pop	{r4, pc}
	...

023ff594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff594:	b510      	push	{r4, lr}
 23ff596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff59a:	4604      	mov	r4, r0
 23ff59c:	4608      	mov	r0, r1
 23ff59e:	4611      	mov	r1, r2
 23ff5a0:	2200      	movs	r2, #0
 23ff5a2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff5a6:	4b04      	ldr	r3, [pc, #16]	; (23ff5b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff5a8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff5aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff5ac:	2301      	movs	r3, #1
 23ff5ae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff5b0:	f7fe ffbc 	bl	23fe52c <hal_usart_init_ex>
}
 23ff5b4:	4620      	mov	r0, r4
 23ff5b6:	bd10      	pop	{r4, pc}
 23ff5b8:	023ffec4 	.word	0x023ffec4

023ff5bc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff5bc:	7c00      	ldrb	r0, [r0, #16]
 23ff5be:	f7fe bf99 	b.w	23fe4f4 <hal_usart_is_enabled>

023ff5c2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff5c2:	7441      	strb	r1, [r0, #17]
}
 23ff5c4:	4770      	bx	lr

023ff5c6 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff5c6:	4770      	bx	lr

023ff5c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff5c8:	4770      	bx	lr

023ff5ca <_ZN9USBSerial4readEv>:
{
 23ff5ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff5cc:	2100      	movs	r1, #0
 23ff5ce:	7c00      	ldrb	r0, [r0, #16]
 23ff5d0:	f7fe ffe4 	bl	23fe59c <HAL_USB_USART_Receive_Data>
}
 23ff5d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5d8:	bd08      	pop	{r3, pc}

023ff5da <_ZN9USBSerial4peekEv>:
{
 23ff5da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff5dc:	2101      	movs	r1, #1
 23ff5de:	7c00      	ldrb	r0, [r0, #16]
 23ff5e0:	f7fe ffdc 	bl	23fe59c <HAL_USB_USART_Receive_Data>
}
 23ff5e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5e8:	bd08      	pop	{r3, pc}

023ff5ea <_ZN9USBSerial17availableForWriteEv>:
{
 23ff5ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff5ec:	7c00      	ldrb	r0, [r0, #16]
 23ff5ee:	f7fe ffc7 	bl	23fe580 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff5f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5f6:	bd08      	pop	{r3, pc}

023ff5f8 <_ZN9USBSerial9availableEv>:
{
 23ff5f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff5fa:	7c00      	ldrb	r0, [r0, #16]
 23ff5fc:	f7fe ffb2 	bl	23fe564 <HAL_USB_USART_Available_Data>
}
 23ff600:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff604:	bd08      	pop	{r3, pc}

023ff606 <_ZN9USBSerial5writeEh>:
{
 23ff606:	b513      	push	{r0, r1, r4, lr}
 23ff608:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff60a:	7c00      	ldrb	r0, [r0, #16]
{
 23ff60c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff60e:	f7fe ffb7 	bl	23fe580 <HAL_USB_USART_Available_Data_For_Write>
 23ff612:	2800      	cmp	r0, #0
 23ff614:	9901      	ldr	r1, [sp, #4]
 23ff616:	dc01      	bgt.n	23ff61c <_ZN9USBSerial5writeEh+0x16>
 23ff618:	7c60      	ldrb	r0, [r4, #17]
 23ff61a:	b120      	cbz	r0, 23ff626 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff61c:	7c20      	ldrb	r0, [r4, #16]
 23ff61e:	f7fe ffcb 	bl	23fe5b8 <HAL_USB_USART_Send_Data>
 23ff622:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff626:	b002      	add	sp, #8
 23ff628:	bd10      	pop	{r4, pc}

023ff62a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff62a:	7c00      	ldrb	r0, [r0, #16]
 23ff62c:	f7fe bfd2 	b.w	23fe5d4 <HAL_USB_USART_Flush_Data>

023ff630 <_ZN9USBSerialD0Ev>:
 23ff630:	b510      	push	{r4, lr}
 23ff632:	4604      	mov	r4, r0
 23ff634:	2114      	movs	r1, #20
 23ff636:	f7fe fc48 	bl	23fdeca <_ZdlPvj>
 23ff63a:	4620      	mov	r0, r4
 23ff63c:	bd10      	pop	{r4, pc}
	...

023ff640 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff640:	b510      	push	{r4, lr}
 23ff642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff646:	4604      	mov	r4, r0
 23ff648:	4608      	mov	r0, r1
 23ff64a:	2100      	movs	r1, #0
 23ff64c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff650:	4b04      	ldr	r3, [pc, #16]	; (23ff664 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff652:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff654:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff656:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff658:	4611      	mov	r1, r2
  _blocking = true;
 23ff65a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff65c:	f7fe ff74 	bl	23fe548 <HAL_USB_USART_Init>
}
 23ff660:	4620      	mov	r0, r4
 23ff662:	bd10      	pop	{r4, pc}
 23ff664:	023ffef4 	.word	0x023ffef4

023ff668 <_Z19acquireSerialBufferv>:
{
 23ff668:	b510      	push	{r4, lr}
 23ff66a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff66c:	2214      	movs	r2, #20
 23ff66e:	2100      	movs	r1, #0
 23ff670:	f000 fa74 	bl	23ffb5c <memset>
}
 23ff674:	4620      	mov	r0, r4
 23ff676:	bd10      	pop	{r4, pc}

023ff678 <_Z16_fetch_usbserialv>:
{
 23ff678:	b510      	push	{r4, lr}
 23ff67a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff67c:	a803      	add	r0, sp, #12
 23ff67e:	f7ff fff3 	bl	23ff668 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff682:	4c0c      	ldr	r4, [pc, #48]	; (23ff6b4 <_Z16_fetch_usbserialv+0x3c>)
 23ff684:	e8d4 1f8f 	ldab	r1, [r4]
 23ff688:	f011 0101 	ands.w	r1, r1, #1
 23ff68c:	d10f      	bne.n	23ff6ae <_Z16_fetch_usbserialv+0x36>
 23ff68e:	4620      	mov	r0, r4
 23ff690:	9101      	str	r1, [sp, #4]
 23ff692:	f7fe fc21 	bl	23fded8 <__cxa_guard_acquire>
 23ff696:	9901      	ldr	r1, [sp, #4]
 23ff698:	b148      	cbz	r0, 23ff6ae <_Z16_fetch_usbserialv+0x36>
 23ff69a:	aa03      	add	r2, sp, #12
 23ff69c:	4806      	ldr	r0, [pc, #24]	; (23ff6b8 <_Z16_fetch_usbserialv+0x40>)
 23ff69e:	f7ff ffcf 	bl	23ff640 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff6a2:	4620      	mov	r0, r4
 23ff6a4:	f7fe fc1d 	bl	23fdee2 <__cxa_guard_release>
 23ff6a8:	4804      	ldr	r0, [pc, #16]	; (23ff6bc <_Z16_fetch_usbserialv+0x44>)
 23ff6aa:	f000 fa44 	bl	23ffb36 <atexit>
	return _usbserial;
}
 23ff6ae:	4802      	ldr	r0, [pc, #8]	; (23ff6b8 <_Z16_fetch_usbserialv+0x40>)
 23ff6b0:	b008      	add	sp, #32
 23ff6b2:	bd10      	pop	{r4, pc}
 23ff6b4:	1007aebc 	.word	0x1007aebc
 23ff6b8:	1007aec0 	.word	0x1007aec0
 23ff6bc:	023ff5c7 	.word	0x023ff5c7

023ff6c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff6c0:	2200      	movs	r2, #0
 23ff6c2:	6840      	ldr	r0, [r0, #4]
 23ff6c4:	4611      	mov	r1, r2
 23ff6c6:	f7ff b857 	b.w	23fe778 <network_ready>

023ff6ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff6ca:	2200      	movs	r2, #0
 23ff6cc:	6840      	ldr	r0, [r0, #4]
 23ff6ce:	4611      	mov	r1, r2
 23ff6d0:	f7ff b88a 	b.w	23fe7e8 <network_listening>

023ff6d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff6d4:	2200      	movs	r2, #0
 23ff6d6:	6840      	ldr	r0, [r0, #4]
 23ff6d8:	4611      	mov	r1, r2
 23ff6da:	f7ff b8a1 	b.w	23fe820 <network_get_listen_timeout>

023ff6de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff6de:	2200      	movs	r2, #0
 23ff6e0:	6840      	ldr	r0, [r0, #4]
 23ff6e2:	f7ff b88f 	b.w	23fe804 <network_set_listen_timeout>

023ff6e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff6e6:	2200      	movs	r2, #0
 23ff6e8:	6840      	ldr	r0, [r0, #4]
 23ff6ea:	f081 0101 	eor.w	r1, r1, #1
 23ff6ee:	f7ff b86d 	b.w	23fe7cc <network_listen>

023ff6f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff6f2:	2300      	movs	r3, #0
 23ff6f4:	6840      	ldr	r0, [r0, #4]
 23ff6f6:	461a      	mov	r2, r3
 23ff6f8:	4619      	mov	r1, r3
 23ff6fa:	f7ff b859 	b.w	23fe7b0 <network_off>

023ff6fe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff6fe:	2300      	movs	r3, #0
 23ff700:	6840      	ldr	r0, [r0, #4]
 23ff702:	461a      	mov	r2, r3
 23ff704:	4619      	mov	r1, r3
 23ff706:	f7ff b845 	b.w	23fe794 <network_on>

023ff70a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff70a:	2200      	movs	r2, #0
 23ff70c:	6840      	ldr	r0, [r0, #4]
 23ff70e:	4611      	mov	r1, r2
 23ff710:	f7ff b816 	b.w	23fe740 <network_connecting>

023ff714 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff714:	2200      	movs	r2, #0
 23ff716:	2102      	movs	r1, #2
 23ff718:	6840      	ldr	r0, [r0, #4]
 23ff71a:	f7ff b81f 	b.w	23fe75c <network_disconnect>

023ff71e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff71e:	2300      	movs	r3, #0
 23ff720:	6840      	ldr	r0, [r0, #4]
 23ff722:	461a      	mov	r2, r3
 23ff724:	f7fe bffe 	b.w	23fe724 <network_connect>

023ff728 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff728:	2204      	movs	r2, #4
 23ff72a:	4b02      	ldr	r3, [pc, #8]	; (23ff734 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff72c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff72e:	4a02      	ldr	r2, [pc, #8]	; (23ff738 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff730:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff732:	4770      	bx	lr
 23ff734:	1007aed4 	.word	0x1007aed4
 23ff738:	023fff24 	.word	0x023fff24

023ff73c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff73c:	4b01      	ldr	r3, [pc, #4]	; (23ff744 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff73e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff740:	4770      	bx	lr
 23ff742:	bf00      	nop
 23ff744:	1007ada0 	.word	0x1007ada0

023ff748 <serialEventRun>:
{
 23ff748:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff74a:	4b0f      	ldr	r3, [pc, #60]	; (23ff788 <serialEventRun+0x40>)
 23ff74c:	b143      	cbz	r3, 23ff760 <serialEventRun+0x18>
 23ff74e:	f7ff ff93 	bl	23ff678 <_Z16_fetch_usbserialv>
 23ff752:	6803      	ldr	r3, [r0, #0]
 23ff754:	691b      	ldr	r3, [r3, #16]
 23ff756:	4798      	blx	r3
 23ff758:	2800      	cmp	r0, #0
 23ff75a:	dd01      	ble.n	23ff760 <serialEventRun+0x18>
        serialEvent();
 23ff75c:	e000      	b.n	23ff760 <serialEventRun+0x18>
 23ff75e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff760:	4b0a      	ldr	r3, [pc, #40]	; (23ff78c <serialEventRun+0x44>)
 23ff762:	b143      	cbz	r3, 23ff776 <serialEventRun+0x2e>
 23ff764:	f000 f952 	bl	23ffa0c <_Z22__fetch_global_Serial1v>
 23ff768:	6803      	ldr	r3, [r0, #0]
 23ff76a:	691b      	ldr	r3, [r3, #16]
 23ff76c:	4798      	blx	r3
 23ff76e:	2800      	cmp	r0, #0
 23ff770:	dd01      	ble.n	23ff776 <serialEventRun+0x2e>
        serialEvent1();
 23ff772:	e000      	b.n	23ff776 <serialEventRun+0x2e>
 23ff774:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff776:	4b06      	ldr	r3, [pc, #24]	; (23ff790 <serialEventRun+0x48>)
 23ff778:	b10b      	cbz	r3, 23ff77e <serialEventRun+0x36>
 23ff77a:	f000 f98d 	bl	23ffa98 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff77e:	4b05      	ldr	r3, [pc, #20]	; (23ff794 <serialEventRun+0x4c>)
 23ff780:	b10b      	cbz	r3, 23ff786 <serialEventRun+0x3e>
 23ff782:	f000 f9bf 	bl	23ffb04 <_Z15serialEventRun3v>
}
 23ff786:	bd08      	pop	{r3, pc}
	...

023ff798 <_post_loop>:
{
 23ff798:	b508      	push	{r3, lr}
	serialEventRun();
 23ff79a:	f7ff ffd5 	bl	23ff748 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff79e:	f7fe fd59 	bl	23fe254 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff7a2:	4b01      	ldr	r3, [pc, #4]	; (23ff7a8 <_post_loop+0x10>)
 23ff7a4:	6018      	str	r0, [r3, #0]
}
 23ff7a6:	bd08      	pop	{r3, pc}
 23ff7a8:	1007aef0 	.word	0x1007aef0

023ff7ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff7ac:	4805      	ldr	r0, [pc, #20]	; (23ff7c4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff7ae:	4a06      	ldr	r2, [pc, #24]	; (23ff7c8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff7b0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff7b2:	1a12      	subs	r2, r2, r0
 23ff7b4:	4905      	ldr	r1, [pc, #20]	; (23ff7cc <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff7b6:	f000 f9c4 	bl	23ffb42 <memcpy>
    __backup_sram_signature = signature;
 23ff7ba:	4b05      	ldr	r3, [pc, #20]	; (23ff7d0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff7bc:	4a05      	ldr	r2, [pc, #20]	; (23ff7d4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff7be:	601a      	str	r2, [r3, #0]
}
 23ff7c0:	bd08      	pop	{r3, pc}
 23ff7c2:	bf00      	nop
 23ff7c4:	1007b400 	.word	0x1007b400
 23ff7c8:	1007b404 	.word	0x1007b404
 23ff7cc:	085ff298 	.word	0x085ff298
 23ff7d0:	1007b400 	.word	0x1007b400
 23ff7d4:	9a271c1e 	.word	0x9a271c1e

023ff7d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff7d8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff7da:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff7dc:	461a      	mov	r2, r3
 23ff7de:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff7e2:	9300      	str	r3, [sp, #0]
 23ff7e4:	f7fe ff58 	bl	23fe698 <system_ctrl_set_result>
}
 23ff7e8:	b003      	add	sp, #12
 23ff7ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff7f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff7f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff7f2:	8843      	ldrh	r3, [r0, #2]
 23ff7f4:	2b0a      	cmp	r3, #10
 23ff7f6:	d008      	beq.n	23ff80a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff7f8:	2b50      	cmp	r3, #80	; 0x50
 23ff7fa:	d10b      	bne.n	23ff814 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff7fc:	4b09      	ldr	r3, [pc, #36]	; (23ff824 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff7fe:	681b      	ldr	r3, [r3, #0]
 23ff800:	b14b      	cbz	r3, 23ff816 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff802:	b003      	add	sp, #12
 23ff804:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff808:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff80a:	f7ff ffe5 	bl	23ff7d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff80e:	b003      	add	sp, #12
 23ff810:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff814:	2300      	movs	r3, #0
 23ff816:	461a      	mov	r2, r3
 23ff818:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff81c:	9300      	str	r3, [sp, #0]
 23ff81e:	f7fe ff3b 	bl	23fe698 <system_ctrl_set_result>
}
 23ff822:	e7f4      	b.n	23ff80e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff824:	1007aee0 	.word	0x1007aee0

023ff828 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff828:	2100      	movs	r1, #0
{
 23ff82a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff82c:	4811      	ldr	r0, [pc, #68]	; (23ff874 <module_user_init_hook+0x4c>)
 23ff82e:	f7ff f875 	bl	23fe91c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff832:	4b11      	ldr	r3, [pc, #68]	; (23ff878 <module_user_init_hook+0x50>)
 23ff834:	681a      	ldr	r2, [r3, #0]
 23ff836:	4b11      	ldr	r3, [pc, #68]	; (23ff87c <module_user_init_hook+0x54>)
 23ff838:	429a      	cmp	r2, r3
 23ff83a:	bf0c      	ite	eq
 23ff83c:	2201      	moveq	r2, #1
 23ff83e:	2200      	movne	r2, #0
 23ff840:	4b0f      	ldr	r3, [pc, #60]	; (23ff880 <module_user_init_hook+0x58>)
 23ff842:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff844:	d001      	beq.n	23ff84a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff846:	f7ff ffb1 	bl	23ff7ac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff84a:	f7fe fcf5 	bl	23fe238 <HAL_RNG_GetRandomNumber>
 23ff84e:	4604      	mov	r4, r0
    srand(seed);
 23ff850:	f000 f98c 	bl	23ffb6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff854:	4b0b      	ldr	r3, [pc, #44]	; (23ff884 <module_user_init_hook+0x5c>)
 23ff856:	b113      	cbz	r3, 23ff85e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff858:	4620      	mov	r0, r4
 23ff85a:	e000      	b.n	23ff85e <module_user_init_hook+0x36>
 23ff85c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff85e:	2100      	movs	r1, #0
 23ff860:	4808      	ldr	r0, [pc, #32]	; (23ff884 <module_user_init_hook+0x5c>)
 23ff862:	f7fe ff51 	bl	23fe708 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff86a:	2100      	movs	r1, #0
 23ff86c:	4806      	ldr	r0, [pc, #24]	; (23ff888 <module_user_init_hook+0x60>)
 23ff86e:	f7fe bf05 	b.w	23fe67c <system_ctrl_set_app_request_handler>
 23ff872:	bf00      	nop
 23ff874:	023ff73d 	.word	0x023ff73d
 23ff878:	1007b400 	.word	0x1007b400
 23ff87c:	9a271c1e 	.word	0x9a271c1e
 23ff880:	1007aedc 	.word	0x1007aedc
 23ff884:	00000000 	.word	0x00000000
 23ff888:	023ff7f1 	.word	0x023ff7f1

023ff88c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff88c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff88e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff890:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff892:	d902      	bls.n	23ff89a <pinAvailable+0xe>
    return false;
 23ff894:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff896:	b003      	add	sp, #12
 23ff898:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff89a:	f1a0 030f 	sub.w	r3, r0, #15
 23ff89e:	2b02      	cmp	r3, #2
 23ff8a0:	d90b      	bls.n	23ff8ba <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff8a2:	2801      	cmp	r0, #1
 23ff8a4:	d821      	bhi.n	23ff8ea <pinAvailable+0x5e>
 23ff8a6:	f000 f85d 	bl	23ff964 <_Z19__fetch_global_Wirev>
 23ff8aa:	2100      	movs	r1, #0
 23ff8ac:	7c00      	ldrb	r0, [r0, #16]
 23ff8ae:	f7fe fd6b 	bl	23fe388 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff8b2:	f080 0001 	eor.w	r0, r0, #1
 23ff8b6:	b2c0      	uxtb	r0, r0
 23ff8b8:	e7ed      	b.n	23ff896 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff8ba:	4d11      	ldr	r5, [pc, #68]	; (23ff900 <pinAvailable+0x74>)
 23ff8bc:	e8d5 1f8f 	ldab	r1, [r5]
 23ff8c0:	f011 0101 	ands.w	r1, r1, #1
 23ff8c4:	d10b      	bne.n	23ff8de <pinAvailable+0x52>
 23ff8c6:	4628      	mov	r0, r5
 23ff8c8:	9101      	str	r1, [sp, #4]
 23ff8ca:	f7fe fb05 	bl	23fded8 <__cxa_guard_acquire>
 23ff8ce:	9901      	ldr	r1, [sp, #4]
 23ff8d0:	b128      	cbz	r0, 23ff8de <pinAvailable+0x52>
 23ff8d2:	480c      	ldr	r0, [pc, #48]	; (23ff904 <pinAvailable+0x78>)
 23ff8d4:	f7ff fd5e 	bl	23ff394 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff8d8:	4628      	mov	r0, r5
 23ff8da:	f7fe fb02 	bl	23fdee2 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff8de:	4b09      	ldr	r3, [pc, #36]	; (23ff904 <pinAvailable+0x78>)
 23ff8e0:	7818      	ldrb	r0, [r3, #0]
 23ff8e2:	f7fe fdb3 	bl	23fe44c <hal_spi_is_enabled>
 23ff8e6:	2800      	cmp	r0, #0
 23ff8e8:	d1d4      	bne.n	23ff894 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff8ea:	3c08      	subs	r4, #8
 23ff8ec:	2c01      	cmp	r4, #1
 23ff8ee:	d805      	bhi.n	23ff8fc <pinAvailable+0x70>
 23ff8f0:	f000 f88c 	bl	23ffa0c <_Z22__fetch_global_Serial1v>
 23ff8f4:	7c00      	ldrb	r0, [r0, #16]
 23ff8f6:	f7fe fdfd 	bl	23fe4f4 <hal_usart_is_enabled>
 23ff8fa:	e7da      	b.n	23ff8b2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff8fc:	2001      	movs	r0, #1
 23ff8fe:	e7ca      	b.n	23ff896 <pinAvailable+0xa>
 23ff900:	1007aee4 	.word	0x1007aee4
 23ff904:	1007aee8 	.word	0x1007aee8

023ff908 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23ff908:	b510      	push	{r4, lr}
 23ff90a:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23ff90c:	f7ff ffbe 	bl	23ff88c <pinAvailable>
 23ff910:	b150      	cbz	r0, 23ff928 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23ff912:	2103      	movs	r1, #3
 23ff914:	4620      	mov	r0, r4
 23ff916:	f7fe fcab 	bl	23fe270 <hal_pin_validate_function>
 23ff91a:	2803      	cmp	r0, #3
 23ff91c:	d104      	bne.n	23ff928 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23ff91e:	4620      	mov	r0, r4
}
 23ff920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23ff924:	f7fe bcb2 	b.w	23fe28c <hal_adc_read>
}
 23ff928:	2000      	movs	r0, #0
 23ff92a:	bd10      	pop	{r4, pc}

023ff92c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff92c:	4770      	bx	lr
	...

023ff930 <_Z17acquireWireBufferv>:
{
 23ff930:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff932:	4b0a      	ldr	r3, [pc, #40]	; (23ff95c <_Z17acquireWireBufferv+0x2c>)
{
 23ff934:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff936:	6003      	str	r3, [r0, #0]
 23ff938:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff93a:	4909      	ldr	r1, [pc, #36]	; (23ff960 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff93c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff93e:	2020      	movs	r0, #32
 23ff940:	f000 f8f4 	bl	23ffb2c <_ZnajRKSt9nothrow_t>
	};
 23ff944:	2520      	movs	r5, #32
 23ff946:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff948:	4905      	ldr	r1, [pc, #20]	; (23ff960 <_Z17acquireWireBufferv+0x30>)
 23ff94a:	4628      	mov	r0, r5
	};
 23ff94c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff94e:	f000 f8ed 	bl	23ffb2c <_ZnajRKSt9nothrow_t>
	};
 23ff952:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff956:	4620      	mov	r0, r4
 23ff958:	bd38      	pop	{r3, r4, r5, pc}
 23ff95a:	bf00      	nop
 23ff95c:	00010018 	.word	0x00010018
 23ff960:	023fff58 	.word	0x023fff58

023ff964 <_Z19__fetch_global_Wirev>:
{
 23ff964:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff966:	4d0e      	ldr	r5, [pc, #56]	; (23ff9a0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff968:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff96a:	e8d5 1f8f 	ldab	r1, [r5]
 23ff96e:	f011 0401 	ands.w	r4, r1, #1
 23ff972:	d111      	bne.n	23ff998 <_Z19__fetch_global_Wirev+0x34>
 23ff974:	4628      	mov	r0, r5
 23ff976:	f7fe faaf 	bl	23fded8 <__cxa_guard_acquire>
 23ff97a:	b168      	cbz	r0, 23ff998 <_Z19__fetch_global_Wirev+0x34>
 23ff97c:	4668      	mov	r0, sp
 23ff97e:	f7ff ffd7 	bl	23ff930 <_Z17acquireWireBufferv>
 23ff982:	466a      	mov	r2, sp
 23ff984:	4621      	mov	r1, r4
 23ff986:	4807      	ldr	r0, [pc, #28]	; (23ff9a4 <_Z19__fetch_global_Wirev+0x40>)
 23ff988:	f7ff fb24 	bl	23fefd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff98c:	4628      	mov	r0, r5
 23ff98e:	f7fe faa8 	bl	23fdee2 <__cxa_guard_release>
 23ff992:	4805      	ldr	r0, [pc, #20]	; (23ff9a8 <_Z19__fetch_global_Wirev+0x44>)
 23ff994:	f000 f8cf 	bl	23ffb36 <atexit>
	return wire;
}
 23ff998:	4802      	ldr	r0, [pc, #8]	; (23ff9a4 <_Z19__fetch_global_Wirev+0x40>)
 23ff99a:	b007      	add	sp, #28
 23ff99c:	bd30      	pop	{r4, r5, pc}
 23ff99e:	bf00      	nop
 23ff9a0:	1007aef4 	.word	0x1007aef4
 23ff9a4:	1007aef8 	.word	0x1007aef8
 23ff9a8:	023ff92d 	.word	0x023ff92d

023ff9ac <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff9ac:	4770      	bx	lr
	...

023ff9b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff9b0:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff9b2:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff9b4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff9b6:	462a      	mov	r2, r5
 23ff9b8:	2100      	movs	r1, #0
 23ff9ba:	f000 f8cf 	bl	23ffb5c <memset>
 23ff9be:	8025      	strh	r5, [r4, #0]
 23ff9c0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9c2:	4907      	ldr	r1, [pc, #28]	; (23ff9e0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff9c4:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff9c6:	8125      	strh	r5, [r4, #8]
 23ff9c8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9ca:	f000 f8af 	bl	23ffb2c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9ce:	4904      	ldr	r1, [pc, #16]	; (23ff9e0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff9d0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff9d2:	4628      	mov	r0, r5
 23ff9d4:	f000 f8aa 	bl	23ffb2c <_ZnajRKSt9nothrow_t>
    };
 23ff9d8:	60e0      	str	r0, [r4, #12]
}
 23ff9da:	4620      	mov	r0, r4
 23ff9dc:	bd38      	pop	{r3, r4, r5, pc}
 23ff9de:	bf00      	nop
 23ff9e0:	023fff58 	.word	0x023fff58

023ff9e4 <__tcf_2>:
 23ff9e4:	4770      	bx	lr

023ff9e6 <__tcf_1>:
 23ff9e6:	4770      	bx	lr

023ff9e8 <_Z20acquireSerial1Bufferv>:
{
 23ff9e8:	b510      	push	{r4, lr}
 23ff9ea:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff9ec:	f7ff ffe0 	bl	23ff9b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff9f0:	4620      	mov	r0, r4
 23ff9f2:	bd10      	pop	{r4, pc}

023ff9f4 <_Z20acquireSerial2Bufferv>:
 23ff9f4:	b510      	push	{r4, lr}
 23ff9f6:	4604      	mov	r4, r0
 23ff9f8:	f7ff ffda 	bl	23ff9b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff9fc:	4620      	mov	r0, r4
 23ff9fe:	bd10      	pop	{r4, pc}

023ffa00 <_Z20acquireSerial3Bufferv>:
 23ffa00:	b510      	push	{r4, lr}
 23ffa02:	4604      	mov	r4, r0
 23ffa04:	f7ff ffd4 	bl	23ff9b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffa08:	4620      	mov	r0, r4
 23ffa0a:	bd10      	pop	{r4, pc}

023ffa0c <_Z22__fetch_global_Serial1v>:
{
 23ffa0c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffa0e:	4d0e      	ldr	r5, [pc, #56]	; (23ffa48 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffa10:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffa12:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa16:	f011 0401 	ands.w	r4, r1, #1
 23ffa1a:	d111      	bne.n	23ffa40 <_Z22__fetch_global_Serial1v+0x34>
 23ffa1c:	4628      	mov	r0, r5
 23ffa1e:	f7fe fa5b 	bl	23fded8 <__cxa_guard_acquire>
 23ffa22:	b168      	cbz	r0, 23ffa40 <_Z22__fetch_global_Serial1v+0x34>
 23ffa24:	a801      	add	r0, sp, #4
 23ffa26:	f7ff ffdf 	bl	23ff9e8 <_Z20acquireSerial1Bufferv>
 23ffa2a:	4621      	mov	r1, r4
 23ffa2c:	aa01      	add	r2, sp, #4
 23ffa2e:	4807      	ldr	r0, [pc, #28]	; (23ffa4c <_Z22__fetch_global_Serial1v+0x40>)
 23ffa30:	f7ff fdb0 	bl	23ff594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffa34:	4628      	mov	r0, r5
 23ffa36:	f7fe fa54 	bl	23fdee2 <__cxa_guard_release>
 23ffa3a:	4805      	ldr	r0, [pc, #20]	; (23ffa50 <_Z22__fetch_global_Serial1v+0x44>)
 23ffa3c:	f000 f87b 	bl	23ffb36 <atexit>
    return serial1;
}
 23ffa40:	4802      	ldr	r0, [pc, #8]	; (23ffa4c <_Z22__fetch_global_Serial1v+0x40>)
 23ffa42:	b007      	add	sp, #28
 23ffa44:	bd30      	pop	{r4, r5, pc}
 23ffa46:	bf00      	nop
 23ffa48:	1007af0c 	.word	0x1007af0c
 23ffa4c:	1007af18 	.word	0x1007af18
 23ffa50:	023ff9ad 	.word	0x023ff9ad

023ffa54 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffa54:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffa56:	4c0d      	ldr	r4, [pc, #52]	; (23ffa8c <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffa58:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffa5a:	e8d4 3f8f 	ldab	r3, [r4]
 23ffa5e:	07db      	lsls	r3, r3, #31
 23ffa60:	d411      	bmi.n	23ffa86 <_Z22__fetch_global_Serial2v+0x32>
 23ffa62:	4620      	mov	r0, r4
 23ffa64:	f7fe fa38 	bl	23fded8 <__cxa_guard_acquire>
 23ffa68:	b168      	cbz	r0, 23ffa86 <_Z22__fetch_global_Serial2v+0x32>
 23ffa6a:	a801      	add	r0, sp, #4
 23ffa6c:	f7ff ffc2 	bl	23ff9f4 <_Z20acquireSerial2Bufferv>
 23ffa70:	2101      	movs	r1, #1
 23ffa72:	aa01      	add	r2, sp, #4
 23ffa74:	4806      	ldr	r0, [pc, #24]	; (23ffa90 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffa76:	f7ff fd8d 	bl	23ff594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffa7a:	4620      	mov	r0, r4
 23ffa7c:	f7fe fa31 	bl	23fdee2 <__cxa_guard_release>
 23ffa80:	4804      	ldr	r0, [pc, #16]	; (23ffa94 <_Z22__fetch_global_Serial2v+0x40>)
 23ffa82:	f000 f858 	bl	23ffb36 <atexit>
	return serial2;
}
 23ffa86:	4802      	ldr	r0, [pc, #8]	; (23ffa90 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffa88:	b006      	add	sp, #24
 23ffa8a:	bd10      	pop	{r4, pc}
 23ffa8c:	1007af10 	.word	0x1007af10
 23ffa90:	1007af2c 	.word	0x1007af2c
 23ffa94:	023ff9e7 	.word	0x023ff9e7

023ffa98 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffa98:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffa9a:	f7ff ffdb 	bl	23ffa54 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffa9e:	4b07      	ldr	r3, [pc, #28]	; (23ffabc <_Z15serialEventRun2v+0x24>)
 23ffaa0:	4604      	mov	r4, r0
 23ffaa2:	b153      	cbz	r3, 23ffaba <_Z15serialEventRun2v+0x22>
 23ffaa4:	f7ff fd8a 	bl	23ff5bc <_ZN11USARTSerial9isEnabledEv>
 23ffaa8:	b138      	cbz	r0, 23ffaba <_Z15serialEventRun2v+0x22>
 23ffaaa:	6823      	ldr	r3, [r4, #0]
 23ffaac:	4620      	mov	r0, r4
 23ffaae:	691b      	ldr	r3, [r3, #16]
 23ffab0:	4798      	blx	r3
 23ffab2:	2800      	cmp	r0, #0
 23ffab4:	dd01      	ble.n	23ffaba <_Z15serialEventRun2v+0x22>
        handler();
 23ffab6:	e000      	b.n	23ffaba <_Z15serialEventRun2v+0x22>
 23ffab8:	bf00      	nop
}
 23ffaba:	bd10      	pop	{r4, pc}
 23ffabc:	00000000 	.word	0x00000000

023ffac0 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffac0:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffac2:	4c0d      	ldr	r4, [pc, #52]	; (23ffaf8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffac4:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffac6:	e8d4 3f8f 	ldab	r3, [r4]
 23ffaca:	07db      	lsls	r3, r3, #31
 23ffacc:	d411      	bmi.n	23ffaf2 <_Z22__fetch_global_Serial3v+0x32>
 23fface:	4620      	mov	r0, r4
 23ffad0:	f7fe fa02 	bl	23fded8 <__cxa_guard_acquire>
 23ffad4:	b168      	cbz	r0, 23ffaf2 <_Z22__fetch_global_Serial3v+0x32>
 23ffad6:	a801      	add	r0, sp, #4
 23ffad8:	f7ff ff92 	bl	23ffa00 <_Z20acquireSerial3Bufferv>
 23ffadc:	2102      	movs	r1, #2
 23ffade:	aa01      	add	r2, sp, #4
 23ffae0:	4806      	ldr	r0, [pc, #24]	; (23ffafc <_Z22__fetch_global_Serial3v+0x3c>)
 23ffae2:	f7ff fd57 	bl	23ff594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffae6:	4620      	mov	r0, r4
 23ffae8:	f7fe f9fb 	bl	23fdee2 <__cxa_guard_release>
 23ffaec:	4804      	ldr	r0, [pc, #16]	; (23ffb00 <_Z22__fetch_global_Serial3v+0x40>)
 23ffaee:	f000 f822 	bl	23ffb36 <atexit>
	return serial3;
}
 23ffaf2:	4802      	ldr	r0, [pc, #8]	; (23ffafc <_Z22__fetch_global_Serial3v+0x3c>)
 23ffaf4:	b006      	add	sp, #24
 23ffaf6:	bd10      	pop	{r4, pc}
 23ffaf8:	1007af14 	.word	0x1007af14
 23ffafc:	1007af40 	.word	0x1007af40
 23ffb00:	023ff9e5 	.word	0x023ff9e5

023ffb04 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffb04:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffb06:	f7ff ffdb 	bl	23ffac0 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffb0a:	4b07      	ldr	r3, [pc, #28]	; (23ffb28 <_Z15serialEventRun3v+0x24>)
 23ffb0c:	4604      	mov	r4, r0
 23ffb0e:	b153      	cbz	r3, 23ffb26 <_Z15serialEventRun3v+0x22>
 23ffb10:	f7ff fd54 	bl	23ff5bc <_ZN11USARTSerial9isEnabledEv>
 23ffb14:	b138      	cbz	r0, 23ffb26 <_Z15serialEventRun3v+0x22>
 23ffb16:	6823      	ldr	r3, [r4, #0]
 23ffb18:	4620      	mov	r0, r4
 23ffb1a:	691b      	ldr	r3, [r3, #16]
 23ffb1c:	4798      	blx	r3
 23ffb1e:	2800      	cmp	r0, #0
 23ffb20:	dd01      	ble.n	23ffb26 <_Z15serialEventRun3v+0x22>
        handler();
 23ffb22:	e000      	b.n	23ffb26 <_Z15serialEventRun3v+0x22>
 23ffb24:	bf00      	nop
}
 23ffb26:	bd10      	pop	{r4, pc}
 23ffb28:	00000000 	.word	0x00000000

023ffb2c <_ZnajRKSt9nothrow_t>:
 23ffb2c:	f7fe b9cb 	b.w	23fdec6 <_Znaj>

023ffb30 <_ZSt25__throw_bad_function_callv>:
 23ffb30:	b508      	push	{r3, lr}
 23ffb32:	f7fe fec9 	bl	23fe8c8 <abort>

023ffb36 <atexit>:
 23ffb36:	2300      	movs	r3, #0
 23ffb38:	4601      	mov	r1, r0
 23ffb3a:	461a      	mov	r2, r3
 23ffb3c:	4618      	mov	r0, r3
 23ffb3e:	f000 b869 	b.w	23ffc14 <__register_exitproc>

023ffb42 <memcpy>:
 23ffb42:	440a      	add	r2, r1
 23ffb44:	1e43      	subs	r3, r0, #1
 23ffb46:	4291      	cmp	r1, r2
 23ffb48:	d100      	bne.n	23ffb4c <memcpy+0xa>
 23ffb4a:	4770      	bx	lr
 23ffb4c:	b510      	push	{r4, lr}
 23ffb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffb52:	4291      	cmp	r1, r2
 23ffb54:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffb58:	d1f9      	bne.n	23ffb4e <memcpy+0xc>
 23ffb5a:	bd10      	pop	{r4, pc}

023ffb5c <memset>:
 23ffb5c:	4402      	add	r2, r0
 23ffb5e:	4603      	mov	r3, r0
 23ffb60:	4293      	cmp	r3, r2
 23ffb62:	d100      	bne.n	23ffb66 <memset+0xa>
 23ffb64:	4770      	bx	lr
 23ffb66:	f803 1b01 	strb.w	r1, [r3], #1
 23ffb6a:	e7f9      	b.n	23ffb60 <memset+0x4>

023ffb6c <srand>:
 23ffb6c:	b538      	push	{r3, r4, r5, lr}
 23ffb6e:	4b10      	ldr	r3, [pc, #64]	; (23ffbb0 <srand+0x44>)
 23ffb70:	4604      	mov	r4, r0
 23ffb72:	681d      	ldr	r5, [r3, #0]
 23ffb74:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffb76:	b9b3      	cbnz	r3, 23ffba6 <srand+0x3a>
 23ffb78:	2018      	movs	r0, #24
 23ffb7a:	f7fe fe7b 	bl	23fe874 <malloc>
 23ffb7e:	4602      	mov	r2, r0
 23ffb80:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffb82:	b920      	cbnz	r0, 23ffb8e <srand+0x22>
 23ffb84:	4b0b      	ldr	r3, [pc, #44]	; (23ffbb4 <srand+0x48>)
 23ffb86:	2142      	movs	r1, #66	; 0x42
 23ffb88:	480b      	ldr	r0, [pc, #44]	; (23ffbb8 <srand+0x4c>)
 23ffb8a:	f7fe feb9 	bl	23fe900 <__assert_func>
 23ffb8e:	490b      	ldr	r1, [pc, #44]	; (23ffbbc <srand+0x50>)
 23ffb90:	4b0b      	ldr	r3, [pc, #44]	; (23ffbc0 <srand+0x54>)
 23ffb92:	e9c0 1300 	strd	r1, r3, [r0]
 23ffb96:	4b0b      	ldr	r3, [pc, #44]	; (23ffbc4 <srand+0x58>)
 23ffb98:	2100      	movs	r1, #0
 23ffb9a:	6083      	str	r3, [r0, #8]
 23ffb9c:	230b      	movs	r3, #11
 23ffb9e:	8183      	strh	r3, [r0, #12]
 23ffba0:	2001      	movs	r0, #1
 23ffba2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffba6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffba8:	2200      	movs	r2, #0
 23ffbaa:	611c      	str	r4, [r3, #16]
 23ffbac:	615a      	str	r2, [r3, #20]
 23ffbae:	bd38      	pop	{r3, r4, r5, pc}
 23ffbb0:	1007ada0 	.word	0x1007ada0
 23ffbb4:	023fff59 	.word	0x023fff59
 23ffbb8:	023fff70 	.word	0x023fff70
 23ffbbc:	abcd330e 	.word	0xabcd330e
 23ffbc0:	e66d1234 	.word	0xe66d1234
 23ffbc4:	0005deec 	.word	0x0005deec

023ffbc8 <strcpy>:
 23ffbc8:	4603      	mov	r3, r0
 23ffbca:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ffbce:	f803 2b01 	strb.w	r2, [r3], #1
 23ffbd2:	2a00      	cmp	r2, #0
 23ffbd4:	d1f9      	bne.n	23ffbca <strcpy+0x2>
 23ffbd6:	4770      	bx	lr

023ffbd8 <strdup>:
 23ffbd8:	4b02      	ldr	r3, [pc, #8]	; (23ffbe4 <strdup+0xc>)
 23ffbda:	4601      	mov	r1, r0
 23ffbdc:	6818      	ldr	r0, [r3, #0]
 23ffbde:	f000 b803 	b.w	23ffbe8 <_strdup_r>
 23ffbe2:	bf00      	nop
 23ffbe4:	1007ada0 	.word	0x1007ada0

023ffbe8 <_strdup_r>:
 23ffbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ffbea:	4604      	mov	r4, r0
 23ffbec:	4608      	mov	r0, r1
 23ffbee:	460d      	mov	r5, r1
 23ffbf0:	f7fe f942 	bl	23fde78 <strlen>
 23ffbf4:	1c42      	adds	r2, r0, #1
 23ffbf6:	4620      	mov	r0, r4
 23ffbf8:	4611      	mov	r1, r2
 23ffbfa:	9201      	str	r2, [sp, #4]
 23ffbfc:	f7fe fe72 	bl	23fe8e4 <_malloc_r>
 23ffc00:	4604      	mov	r4, r0
 23ffc02:	b118      	cbz	r0, 23ffc0c <_strdup_r+0x24>
 23ffc04:	9a01      	ldr	r2, [sp, #4]
 23ffc06:	4629      	mov	r1, r5
 23ffc08:	f7ff ff9b 	bl	23ffb42 <memcpy>
 23ffc0c:	4620      	mov	r0, r4
 23ffc0e:	b003      	add	sp, #12
 23ffc10:	bd30      	pop	{r4, r5, pc}
	...

023ffc14 <__register_exitproc>:
 23ffc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffc18:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffcd8 <__register_exitproc+0xc4>
 23ffc1c:	4606      	mov	r6, r0
 23ffc1e:	461f      	mov	r7, r3
 23ffc20:	460d      	mov	r5, r1
 23ffc22:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc26:	4691      	mov	r9, r2
 23ffc28:	f000 f858 	bl	23ffcdc <__retarget_lock_acquire_recursive>
 23ffc2c:	4b26      	ldr	r3, [pc, #152]	; (23ffcc8 <__register_exitproc+0xb4>)
 23ffc2e:	681c      	ldr	r4, [r3, #0]
 23ffc30:	b934      	cbnz	r4, 23ffc40 <__register_exitproc+0x2c>
 23ffc32:	4c26      	ldr	r4, [pc, #152]	; (23ffccc <__register_exitproc+0xb8>)
 23ffc34:	601c      	str	r4, [r3, #0]
 23ffc36:	4b26      	ldr	r3, [pc, #152]	; (23ffcd0 <__register_exitproc+0xbc>)
 23ffc38:	b113      	cbz	r3, 23ffc40 <__register_exitproc+0x2c>
 23ffc3a:	681b      	ldr	r3, [r3, #0]
 23ffc3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffc40:	6863      	ldr	r3, [r4, #4]
 23ffc42:	2b1f      	cmp	r3, #31
 23ffc44:	dd07      	ble.n	23ffc56 <__register_exitproc+0x42>
 23ffc46:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc4a:	f000 f849 	bl	23ffce0 <__retarget_lock_release_recursive>
 23ffc4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffc56:	b35e      	cbz	r6, 23ffcb0 <__register_exitproc+0x9c>
 23ffc58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffc5c:	b988      	cbnz	r0, 23ffc82 <__register_exitproc+0x6e>
 23ffc5e:	4b1d      	ldr	r3, [pc, #116]	; (23ffcd4 <__register_exitproc+0xc0>)
 23ffc60:	b923      	cbnz	r3, 23ffc6c <__register_exitproc+0x58>
 23ffc62:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc66:	f000 f83a 	bl	23ffcde <__retarget_lock_release>
 23ffc6a:	e7f0      	b.n	23ffc4e <__register_exitproc+0x3a>
 23ffc6c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffc70:	f7fe fe00 	bl	23fe874 <malloc>
 23ffc74:	2800      	cmp	r0, #0
 23ffc76:	d0f4      	beq.n	23ffc62 <__register_exitproc+0x4e>
 23ffc78:	2300      	movs	r3, #0
 23ffc7a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffc7e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffc82:	6863      	ldr	r3, [r4, #4]
 23ffc84:	2201      	movs	r2, #1
 23ffc86:	2e02      	cmp	r6, #2
 23ffc88:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffc8c:	fa02 f203 	lsl.w	r2, r2, r3
 23ffc90:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffc94:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffc98:	ea43 0302 	orr.w	r3, r3, r2
 23ffc9c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffca0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffca4:	bf02      	ittt	eq
 23ffca6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffcaa:	4313      	orreq	r3, r2
 23ffcac:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffcb0:	6863      	ldr	r3, [r4, #4]
 23ffcb2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcb6:	1c5a      	adds	r2, r3, #1
 23ffcb8:	3302      	adds	r3, #2
 23ffcba:	6062      	str	r2, [r4, #4]
 23ffcbc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffcc0:	f000 f80e 	bl	23ffce0 <__retarget_lock_release_recursive>
 23ffcc4:	2000      	movs	r0, #0
 23ffcc6:	e7c4      	b.n	23ffc52 <__register_exitproc+0x3e>
 23ffcc8:	1007afe0 	.word	0x1007afe0
 23ffccc:	1007af54 	.word	0x1007af54
 23ffcd0:	00000000 	.word	0x00000000
 23ffcd4:	023fe875 	.word	0x023fe875
 23ffcd8:	1007ae04 	.word	0x1007ae04

023ffcdc <__retarget_lock_acquire_recursive>:
 23ffcdc:	4770      	bx	lr

023ffcde <__retarget_lock_release>:
 23ffcde:	4770      	bx	lr

023ffce0 <__retarget_lock_release_recursive>:
 23ffce0:	4770      	bx	lr
	...

023ffce4 <dynalib_user>:
 23ffce4:	de89 023f deb1 023f deb5 023f 0000 0000     ..?...?...?.....
 23ffcf4:	7254 6769 6567 2072 6153 6566 6f77 6472     Trigger Safeword
 23ffd04:	4820 7061 6974 0063 7570 6c62 7369 4d68      Haptic.publishM
 23ffd14:	7365 6173 6567 203a 5300 6e65 6f73 2072     essage: .Sensor 
 23ffd24:	6156 756c 3a65 2520 0064 6f63 2e6d 6564     Value: %d.com.de
 23ffd34:	4973 766e 3032 2e32 7270 6a6f 6365 3274     sInv202.project2
 23ffd44:	732e 6661 5765 726f 2e64 6130 3031 6361     .safeWord.0a10ac
 23ffd54:	6465 3032 3132 3439 3439 6134 3430 6233     ed202194944a043b
 23ffd64:	6332 6300 6d6f 642e 7365 6e49 3276 3230     2c.com.desInv202
 23ffd74:	702e 6f72 656a 7463 2e32 6173 6566 6f57     .project2.safeWo
 23ffd84:	6472 002e 6130 3031 6361 6465 3032 3132     rd..0a10aced2021
 23ffd94:	3439 3439 6134 3430 6433 3834 3000 3161     94944a043d48.0a1
 23ffda4:	6130 6563 3264 3230 3931 3934 3434 3061     0aced202194944a0
 23ffdb4:	3434 6461 0030 6f63 2e6d 6c65 7a69 2e61     44ad0.com.eliza.
 23ffdc4:	6870 746f 6e6f 0032                         photon2.

023ffdcc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdd4:	e9d5 023f e9db 023f ea19 023f e9e9 023f     ..?...?...?...?.
 23ffde4:	e9d7 023f                                   ..?.

023ffde8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf0:	ef5f 023f ef55 023f ef4b 023f ef41 023f     _.?.U.?.K.?.A.?.
 23ffe00:	ef35 023f ef29 023f f1d1 023f f1d9 023f     5.?.).?...?...?.
 23ffe10:	ef1d 023f ef15 023f ef0b 023f ef01 023f     ..?...?...?...?.
 23ffe20:	f209 023f                                   ..?.

023ffe24 <_ZTV7TwoWire>:
	...
 23ffe2c:	ef7d 023f efc7 023f ef9f 023f ef7f 023f     }.?...?...?...?.
 23ffe3c:	efa7 023f efaf 023f efb7 023f efbf 023f     ..?...?...?...?.

023ffe4c <_ZTV9IPAddress>:
	...
 23ffe54:	f0a1 023f f091 023f f093 023f 7061 0070     ..?...?...?.app.

023ffe64 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe6c:	f191 023f f19b 023f f1a5 023f f1af 023f     ..?...?...?...?.
 23ffe7c:	f1b9 023f f1c5 023f f1d1 023f f1d9 023f     ..?...?...?...?.
 23ffe8c:	f1e1 023f f1ed 023f f1f5 023f f1ff 023f     ..?...?...?...?.
 23ffe9c:	f209 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffeac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffebc <_ZTV11USARTSerial>:
	...
 23ffec4:	f519 023f f585 023f f55d 023f f2f5 023f     ..?...?.].?...?.
 23ffed4:	f52d 023f f549 023f f53b 023f f557 023f     -.?.I.?.;.?.W.?.
 23ffee4:	f51b 023f f51f 023f                         ..?...?.

023ffeec <_ZTV9USBSerial>:
	...
 23ffef4:	f5c9 023f f631 023f f607 023f f2f5 023f     ..?.1.?...?...?.
 23fff04:	f5f9 023f f5cb 023f f5db 023f f62b 023f     ..?...?...?.+.?.
 23fff14:	f5eb 023f f5c3 023f                         ..?...?.

023fff1c <_ZTVN5spark9WiFiClassE>:
	...
 23fff24:	f71f 023f f715 023f f70b 023f f6c1 023f     ..?...?...?...?.
 23fff34:	f6ff 023f f6f3 023f f1d1 023f f1d9 023f     ..?...?...?...?.
 23fff44:	f6e7 023f f6df 023f f6d5 023f f6cb 023f     ..?...?...?...?.
 23fff54:	f209 023f                                   ..?.

023fff58 <_ZSt7nothrow>:
 23fff58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fff98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffa8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fe18d 	.word	0x023fe18d
 23fffd0:	023fe9c5 	.word	0x023fe9c5
 23fffd4:	023fef69 	.word	0x023fef69
 23fffd8:	023ff181 	.word	0x023ff181
 23fffdc:	023ff2e1 	.word	0x023ff2e1
 23fffe0:	023ff389 	.word	0x023ff389
 23fffe4:	023ff4e1 	.word	0x023ff4e1
 23fffe8:	023ff505 	.word	0x023ff505
 23fffec:	023ff729 	.word	0x023ff729
